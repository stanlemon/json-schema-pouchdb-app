{"version":3,"sources":["webpack://json-schema-pouchdb-app/./src/util/stringify.js","webpack://json-schema-pouchdb-app/./src/components/SchemaEditor.jsx"],"names":["stringify","data","JSON","SchemaEditor","React","loaded","title","schema","value","error","event","target","this","setState","save","async","x","y","trim","parse","e","console","warn","id","getId","props","db","saveSchema","state","match","params","getSchema","render","DocumentTitle","Typography","variant","component","Link","RouterLink","to","data-testid","Grid","container","spacing","item","xs","TextField","fullWidth","label","onChange","updateTitle","size","Spacer","Alert","severity","updateSchema","width","mode","theme","disabled","Button","color","withRouter"],"mappings":"oWAAe,SAASA,EAAUC,GAChC,OAAOC,KAAKF,UAAUC,EAAM,KAAM,M,wHCgB7B,MAAME,UAAqBC,YAAgB,6CACxC,CACNC,QAAQ,EACRC,MAAO,GACPC,OAAQ,GACRC,MAAOR,EAAU,IACjBS,MAAO,OANuC,sBAyBjCC,IACb,MAAQF,MAAOF,GAAUI,EAAMC,OAE/BC,KAAKC,SAAS,CAAEP,UAAS,IAAMM,KAAKE,YA5BU,uBA+BjCC,MAAOP,EAAOQ,EAAGC,KAK9B,GAHAL,KAAKC,SAAS,CAAEL,UAGK,KAAjBA,EAAMU,OAIV,IACE,MAAMX,EAASL,KAAKiB,MAAMX,SAEpBI,KAAKE,OAGXF,KAAKC,SACH,CACEJ,MAAO,KACPF,WAEF,IAAMK,KAAKE,SAEb,MAAOM,GAEPC,QAAQC,KAAKF,OAvD+B,eA2DzCL,UACL,MAAMQ,EAAKX,KAAKY,cAEVZ,KAAKa,MAAMC,GAAGC,WAAWJ,EAAIX,KAAKgB,MAAMtB,MAAOM,KAAKgB,MAAMrB,WArDlEiB,QACE,MAAM,GAAED,GAAOX,KAAKa,MAAMI,MAAMC,OAChC,OAAOP,EAGc,0BACrB,MAAM,MAAEjB,EAAF,OAASC,SAAiBK,KAAKa,MAAMC,GAAGK,UAAUnB,KAAKY,SAE7DZ,KAAKC,SAAS,CACZR,QAAQ,EACRC,QACAC,SACAC,MAAOR,EAAUO,KA4CrByB,SACE,MAAM,OAAE3B,EAAF,MAAUC,EAAV,MAAiBE,EAAjB,OAAwBD,EAAxB,MAAgCE,GAAUG,KAAKgB,MAErD,OAAKvB,EAKH,gCACE,gBAAC4B,EAAA,EAAD,CAAe3B,MAAQ,QAAOA,MAC9B,gBAAC4B,EAAA,EAAD,CAAYC,QAAQ,KAAKC,UAAU,MAAnC,QACQ9B,GAER,yBACE,gBAAC+B,EAAA,EAAD,CACED,UAAWE,KACXC,GAAG,IACHC,cAAY,yBAHd,0BAQF,gBAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,GACvB,gBAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,IAAE,GACX,gBAACC,EAAA,EAAD,CACEC,WAAS,EACTxB,GAAG,cACHyB,MAAM,cACNC,SAAUrC,KAAKsC,YACf1C,MAAOF,EACP6C,KAAK,QACLhB,QAAQ,WACRK,cAAY,gBAGd,gBAACY,EAAA,EAAD,MAEC3C,GACC,gCACE,gBAAC4C,EAAA,EAAD,CAAOC,SAAS,QAAQd,cAAY,gBACjC/B,GAEH,gBAAC2C,EAAA,EAAD,OAIJ,gBAAC,KAAD,CACEH,SAAUrC,KAAK2C,aACf/C,MAAOA,EACPgD,MAAM,OACNC,KAAK,OACLC,MAAM,WACNlB,cAAY,kBAGd,gBAACY,EAAA,EAAD,OAEF,gBAACX,EAAA,EAAD,CAAMG,MAAI,EAACC,IAAE,GACX,gBAAC,KAAD,CAAMc,UAAU,EAAMpD,OAAQA,EAAQiC,cAAY,kBAChD,gBAACoB,EAAA,EAAD,CACEzB,QAAQ,YACR0B,MAAM,UACNrB,cAAY,sBAHd,aAUN,gBAACY,EAAA,EAAD,OAjEK,6BAuEb,SAAeU,QAAW3D","file":"SchemaEditor.js","sourcesContent":["export default function stringify(data) {\n  return JSON.stringify(data, null, \"  \");\n}\n","import React from \"react\";\nimport AceEditor from \"react-ace\";\nimport \"ace-builds/src-noconflict/mode-json\";\nimport \"ace-builds/src-noconflict/theme-twilight\";\nimport Form from \"@rjsf/material-ui\";\nimport Link from \"@material-ui/core/Link\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport { withRouter } from \"react-router\";\nimport { Link as RouterLink } from \"react-router-dom\";\nimport Spacer from \"./Spacer\";\nimport DocumentTitle from \"./DocumentTitle\";\nimport stringify from \"../util/stringify\";\n\nexport class SchemaEditor extends React.Component {\n  state = {\n    loaded: false,\n    title: \"\",\n    schema: {},\n    value: stringify({}),\n    error: null,\n  };\n\n  getId() {\n    const { id } = this.props.match.params;\n    return id;\n  }\n\n  async componentDidMount() {\n    const { title, schema } = await this.props.db.getSchema(this.getId());\n\n    this.setState({\n      loaded: true,\n      title,\n      schema,\n      value: stringify(schema),\n    });\n  }\n\n  updateTitle = (event) => {\n    const { value: title } = event.target;\n\n    this.setState({ title }, () => this.save());\n  };\n\n  updateSchema = async (value, x, y) => {\n    // Update the value even if there are syntax errors\n    this.setState({ value });\n\n    // If the editor has been cleared skip trying to parse and validate it\n    if (value.trim() === \"\") {\n      return;\n    }\n\n    try {\n      const schema = JSON.parse(value);\n\n      await this.save();\n\n      // Only update the schema and save it if it is valid\n      this.setState(\n        {\n          error: null,\n          schema,\n        },\n        () => this.save()\n      );\n    } catch (e) {\n      // Occurs a lot while typing\n      console.warn(e);\n    }\n  };\n\n  save = async () => {\n    const id = this.getId();\n\n    await this.props.db.saveSchema(id, this.state.title, this.state.schema);\n  };\n\n  render() {\n    const { loaded, title, value, schema, error } = this.state;\n\n    if (!loaded) {\n      return <div />;\n    }\n\n    return (\n      <>\n        <DocumentTitle title={`Edit ${title}`} />\n        <Typography variant=\"h3\" component=\"h1\">\n          Edit {title}\n        </Typography>\n        <p>\n          <Link\n            component={RouterLink}\n            to=\"/\"\n            data-testid=\"return-to-schema-list\"\n          >\n            Return to Schema List\n          </Link>\n        </p>\n        <Grid container spacing={2}>\n          <Grid item xs>\n            <TextField\n              fullWidth\n              id=\"schema-name\"\n              label=\"Schema Name\"\n              onChange={this.updateTitle}\n              value={title}\n              size=\"small\"\n              variant=\"outlined\"\n              data-testid=\"schema-name\"\n            />\n\n            <Spacer />\n\n            {error && (\n              <>\n                <Alert severity=\"error\" data-testid=\"schema-error\">\n                  {error}\n                </Alert>\n                <Spacer />\n              </>\n            )}\n\n            <AceEditor\n              onChange={this.updateSchema}\n              value={value}\n              width=\"100%\"\n              mode=\"json\"\n              theme=\"twilight\"\n              data-testid=\"schema-editor\"\n            />\n\n            <Spacer />\n          </Grid>\n          <Grid item xs>\n            <Form disabled={true} schema={schema} data-testid=\"schema-preview\">\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                data-testid=\"save-schema-button\"\n              >\n                Submit\n              </Button>\n            </Form>\n          </Grid>\n        </Grid>\n        <Spacer />\n      </>\n    );\n  }\n}\n\nexport default withRouter(SchemaEditor);\n"],"sourceRoot":""}