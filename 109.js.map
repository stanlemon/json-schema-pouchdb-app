{"version":3,"sources":["webpack://json-schema-pouchdb-app/./node_modules/diff-match-patch/index.js","webpack://json-schema-pouchdb-app/./node_modules/lodash.get/index.js","webpack://json-schema-pouchdb-app/./node_modules/lodash.isequal/index.js"],"names":["diff_match_patch","this","Diff_Timeout","Diff_EditCost","Match_Threshold","Match_Distance","Patch_DeleteThreshold","Patch_Margin","Match_MaxBits","DIFF_DELETE","Diff","op","text","prototype","diff_main","text1","text2","opt_checklines","opt_deadline","Number","MAX_VALUE","Date","getTime","deadline","Error","checklines","commonlength","diff_commonPrefix","commonprefix","substring","diff_commonSuffix","commonsuffix","length","diffs","diff_compute_","unshift","push","diff_cleanupMerge","longtext","shorttext","i","indexOf","hm","diff_halfMatch_","text1_a","text1_b","text2_a","text2_b","mid_common","diffs_a","diffs_b","concat","diff_lineMode_","diff_bisect_","a","diff_linesToChars_","chars1","chars2","linearray","lineArray","diff_charsToLines_","diff_cleanupSemantic","pointer","count_delete","count_insert","text_delete","text_insert","splice","subDiff","j","pop","text1_length","text2_length","max_d","Math","ceil","v_offset","v_length","v1","Array","v2","x","delta","front","k1start","k1end","k2start","k2end","d","k1","k1_offset","y1","x1","charAt","k2_offset","x2","diff_bisectSplit_","k2","y2","y","text1a","text2a","text1b","text2b","diffsb","lineHash","diff_linesToCharsMunge_","chars","lineStart","lineEnd","lineArrayLength","line","hasOwnProperty","undefined","String","fromCharCode","maxLines","charCodeAt","join","pointermin","pointermax","min","pointermid","pointerstart","floor","pointerend","diff_commonOverlap_","text_length","best","pattern","found","dmp","diff_halfMatchI_","best_longtext_a","best_longtext_b","best_shorttext_a","best_shorttext_b","seed","best_common","prefixLength","suffixLength","hm1","hm2","changes","equalities","equalitiesLength","lastEquality","length_insertions1","length_deletions1","length_insertions2","length_deletions2","max","diff_cleanupSemanticLossless","deletion","insertion","overlap_length1","overlap_length2","diff_cleanupSemanticScore_","one","two","char1","char2","nonAlphaNumeric1","match","nonAlphaNumericRegex_","nonAlphaNumeric2","whitespace1","whitespaceRegex_","whitespace2","lineBreak1","linebreakRegex_","lineBreak2","blankLine1","blanklineEndRegex_","blankLine2","blanklineStartRegex_","equality1","edit","equality2","commonOffset","commonString","bestEquality1","bestEdit","bestEquality2","bestScore","score","diff_cleanupEfficiency","pre_ins","pre_del","post_ins","post_del","diff_xIndex","loc","last_chars1","last_chars2","diff_prettyHtml","html","pattern_amp","pattern_lt","pattern_gt","pattern_para","replace","diff_text1","diff_text2","diff_levenshtein","levenshtein","insertions","deletions","data","diff_toDelta","encodeURI","diff_fromDelta","diffsLength","tokens","split","param","decodeURI","ex","n","parseInt","isNaN","match_main","match_bitap_","s","match_alphabet_","match_bitapScore_","e","accuracy","proximity","abs","score_threshold","best_loc","lastIndexOf","bin_min","bin_mid","matchmask","last_rd","bin_max","start","finish","rd","charMatch","patch_addContext_","patch","start2","length1","padding","prefix","suffix","start1","length2","patch_make","opt_b","opt_c","patches","patch_obj","patchDiffLength","char_count1","char_count2","prepatch_text","postpatch_text","diff_type","diff_text","patch_deepCopy","patchesCopy","patchCopy","patch_apply","nullPadding","patch_addPadding","patch_splitMax","results","start_loc","expected_loc","end_loc","index2","index1","mod","paddingLength","extraLength","patch_size","bigpatch","precontext","empty","shift","postcontext","patch_toText","patch_fromText","textline","textPointer","patchHeader","m","sign","toString","module","exports","uid","HASH_UNDEFINED","reIsDeepProp","reIsPlainProp","reLeadingDot","rePropName","reEscapeChar","reIsHostCtor","freeGlobal","g","Object","freeSelf","self","root","Function","arrayProto","funcProto","objectProto","coreJsData","maskSrcKey","exec","keys","IE_PROTO","funcToString","objectToString","reIsNative","RegExp","call","Symbol","Map","getNative","nativeCreate","symbolProto","symbolToString","Hash","entries","index","clear","entry","set","ListCache","MapCache","assocIndexOf","array","key","value","other","getMapData","map","type","__data__","object","getValue","isObject","func","tag","isFunction","result","isHostObject","test","toSource","baseIsNative","has","get","stringToPath","memoize","string","isSymbol","baseToString","number","quote","toKey","resolver","TypeError","memoized","args","arguments","apply","cache","Cache","isArray","isObjectLike","path","defaultValue","isKey","baseGet","MAX_SAFE_INTEGER","argsTag","arrayTag","boolTag","dateTag","errorTag","funcTag","mapTag","numberTag","objectTag","promiseTag","regexpTag","setTag","stringTag","weakMapTag","arrayBufferTag","dataViewTag","reIsUint","typedArrayTags","freeExports","nodeType","freeModule","moduleExports","freeProcess","process","nodeUtil","binding","nodeIsTypedArray","isTypedArray","arraySome","predicate","mapToArray","size","forEach","setToArray","transform","nativeObjectToString","Buffer","Uint8Array","propertyIsEnumerable","symToStringTag","toStringTag","nativeGetSymbols","getOwnPropertySymbols","nativeIsBuffer","isBuffer","nativeKeys","arg","DataView","Promise","Set","WeakMap","dataViewCtorString","mapCtorString","promiseCtorString","setCtorString","weakMapCtorString","symbolValueOf","valueOf","SetCache","values","add","Stack","eq","baseGetTag","isOwn","unmasked","getRawTag","baseIsArguments","baseIsEqual","bitmask","customizer","stack","equalFunc","objIsArr","othIsArr","objTag","getTag","othTag","objIsObj","othIsObj","isSameTag","equalArrays","byteLength","byteOffset","buffer","name","message","convert","isPartial","stacked","equalByTag","objIsWrapped","othIsWrapped","objUnwrapped","othUnwrapped","objProps","getAllKeys","objLength","skipCtor","objValue","othValue","compared","objCtor","constructor","othCtor","equalObjects","baseIsEqualDeep","arrLength","othLength","seen","arrValue","othIndex","keysFunc","symbolsFunc","offset","arrayPush","baseGetAllKeys","getSymbols","isMasked","pairs","LARGE_ARRAY_SIZE","resIndex","symbol","arrayFilter","isIndex","ArrayBuffer","resolve","Ctor","ctorString","isArguments","isLength","baseUnary","inherited","isArr","isArg","isBuff","isType","skipIndexes","iteratee","baseTimes","arrayLikeKeys","baseKeys"],"mappings":"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","file":"109.js","sourcesContent":["/**\n * Diff Match and Patch\n * Copyright 2018 The diff-match-patch Authors.\n * https://github.com/google/diff-match-patch\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Computes the difference between two texts to create a patch.\n * Applies the patch onto another text, allowing for errors.\n * @author fraser@google.com (Neil Fraser)\n */\n\n/**\n * Class containing the diff, match and patch methods.\n * @constructor\n */\nvar diff_match_patch = function() {\n\n  // Defaults.\n  // Redefine these in your program to override the defaults.\n\n  // Number of seconds to map a diff before giving up (0 for infinity).\n  this.Diff_Timeout = 1.0;\n  // Cost of an empty edit operation in terms of edit characters.\n  this.Diff_EditCost = 4;\n  // At what point is no match declared (0.0 = perfection, 1.0 = very loose).\n  this.Match_Threshold = 0.5;\n  // How far to search for a match (0 = exact location, 1000+ = broad match).\n  // A match this many characters away from the expected location will add\n  // 1.0 to the score (0.0 is a perfect match).\n  this.Match_Distance = 1000;\n  // When deleting a large block of text (over ~64 characters), how close do\n  // the contents have to be to match the expected contents. (0.0 = perfection,\n  // 1.0 = very loose).  Note that Match_Threshold controls how closely the\n  // end points of a delete need to match.\n  this.Patch_DeleteThreshold = 0.5;\n  // Chunk size for context length.\n  this.Patch_Margin = 4;\n\n  // The number of bits in an int.\n  this.Match_MaxBits = 32;\n};\n\n\n//  DIFF FUNCTIONS\n\n\n/**\n * The data structure representing a diff is an array of tuples:\n * [[DIFF_DELETE, 'Hello'], [DIFF_INSERT, 'Goodbye'], [DIFF_EQUAL, ' world.']]\n * which means: delete 'Hello', add 'Goodbye' and keep ' world.'\n */\nvar DIFF_DELETE = -1;\nvar DIFF_INSERT = 1;\nvar DIFF_EQUAL = 0;\n\n/**\n * Class representing one diff tuple.\n * ~Attempts to look like a two-element array (which is what this used to be).~\n * Constructor returns an actual two-element array, to allow destructing @JackuB\n * See https://github.com/JackuB/diff-match-patch/issues/14 for details\n * @param {number} op Operation, one of: DIFF_DELETE, DIFF_INSERT, DIFF_EQUAL.\n * @param {string} text Text to be deleted, inserted, or retained.\n * @constructor\n */\ndiff_match_patch.Diff = function(op, text) {\n  return [op, text];\n};\n\n/**\n * Find the differences between two texts.  Simplifies the problem by stripping\n * any common prefix or suffix off the texts before diffing.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {boolean=} opt_checklines Optional speedup flag. If present and false,\n *     then don't run a line-level diff first to identify the changed areas.\n *     Defaults to true, which does a faster, slightly less optimal diff.\n * @param {number=} opt_deadline Optional time when the diff should be complete\n *     by.  Used internally for recursive calls.  Users should set DiffTimeout\n *     instead.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n */\ndiff_match_patch.prototype.diff_main = function(text1, text2, opt_checklines,\n    opt_deadline) {\n  // Set a deadline by which time the diff must be complete.\n  if (typeof opt_deadline == 'undefined') {\n    if (this.Diff_Timeout <= 0) {\n      opt_deadline = Number.MAX_VALUE;\n    } else {\n      opt_deadline = (new Date).getTime() + this.Diff_Timeout * 1000;\n    }\n  }\n  var deadline = opt_deadline;\n\n  // Check for null inputs.\n  if (text1 == null || text2 == null) {\n    throw new Error('Null input. (diff_main)');\n  }\n\n  // Check for equality (speedup).\n  if (text1 == text2) {\n    if (text1) {\n      return [new diff_match_patch.Diff(DIFF_EQUAL, text1)];\n    }\n    return [];\n  }\n\n  if (typeof opt_checklines == 'undefined') {\n    opt_checklines = true;\n  }\n  var checklines = opt_checklines;\n\n  // Trim off common prefix (speedup).\n  var commonlength = this.diff_commonPrefix(text1, text2);\n  var commonprefix = text1.substring(0, commonlength);\n  text1 = text1.substring(commonlength);\n  text2 = text2.substring(commonlength);\n\n  // Trim off common suffix (speedup).\n  commonlength = this.diff_commonSuffix(text1, text2);\n  var commonsuffix = text1.substring(text1.length - commonlength);\n  text1 = text1.substring(0, text1.length - commonlength);\n  text2 = text2.substring(0, text2.length - commonlength);\n\n  // Compute the diff on the middle block.\n  var diffs = this.diff_compute_(text1, text2, checklines, deadline);\n\n  // Restore the prefix and suffix.\n  if (commonprefix) {\n    diffs.unshift(new diff_match_patch.Diff(DIFF_EQUAL, commonprefix));\n  }\n  if (commonsuffix) {\n    diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, commonsuffix));\n  }\n  this.diff_cleanupMerge(diffs);\n  return diffs;\n};\n\n\n/**\n * Find the differences between two texts.  Assumes that the texts do not\n * have any common prefix or suffix.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {boolean} checklines Speedup flag.  If false, then don't run a\n *     line-level diff first to identify the changed areas.\n *     If true, then run a faster, slightly less optimal diff.\n * @param {number} deadline Time when the diff should be complete by.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @private\n */\ndiff_match_patch.prototype.diff_compute_ = function(text1, text2, checklines,\n    deadline) {\n  var diffs;\n\n  if (!text1) {\n    // Just add some text (speedup).\n    return [new diff_match_patch.Diff(DIFF_INSERT, text2)];\n  }\n\n  if (!text2) {\n    // Just delete some text (speedup).\n    return [new diff_match_patch.Diff(DIFF_DELETE, text1)];\n  }\n\n  var longtext = text1.length > text2.length ? text1 : text2;\n  var shorttext = text1.length > text2.length ? text2 : text1;\n  var i = longtext.indexOf(shorttext);\n  if (i != -1) {\n    // Shorter text is inside the longer text (speedup).\n    diffs = [new diff_match_patch.Diff(DIFF_INSERT, longtext.substring(0, i)),\n             new diff_match_patch.Diff(DIFF_EQUAL, shorttext),\n             new diff_match_patch.Diff(DIFF_INSERT,\n                 longtext.substring(i + shorttext.length))];\n    // Swap insertions for deletions if diff is reversed.\n    if (text1.length > text2.length) {\n      diffs[0][0] = diffs[2][0] = DIFF_DELETE;\n    }\n    return diffs;\n  }\n\n  if (shorttext.length == 1) {\n    // Single character string.\n    // After the previous speedup, the character can't be an equality.\n    return [new diff_match_patch.Diff(DIFF_DELETE, text1),\n            new diff_match_patch.Diff(DIFF_INSERT, text2)];\n  }\n\n  // Check to see if the problem can be split in two.\n  var hm = this.diff_halfMatch_(text1, text2);\n  if (hm) {\n    // A half-match was found, sort out the return data.\n    var text1_a = hm[0];\n    var text1_b = hm[1];\n    var text2_a = hm[2];\n    var text2_b = hm[3];\n    var mid_common = hm[4];\n    // Send both pairs off for separate processing.\n    var diffs_a = this.diff_main(text1_a, text2_a, checklines, deadline);\n    var diffs_b = this.diff_main(text1_b, text2_b, checklines, deadline);\n    // Merge the results.\n    return diffs_a.concat([new diff_match_patch.Diff(DIFF_EQUAL, mid_common)],\n                          diffs_b);\n  }\n\n  if (checklines && text1.length > 100 && text2.length > 100) {\n    return this.diff_lineMode_(text1, text2, deadline);\n  }\n\n  return this.diff_bisect_(text1, text2, deadline);\n};\n\n\n/**\n * Do a quick line-level diff on both strings, then rediff the parts for\n * greater accuracy.\n * This speedup can produce non-minimal diffs.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {number} deadline Time when the diff should be complete by.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @private\n */\ndiff_match_patch.prototype.diff_lineMode_ = function(text1, text2, deadline) {\n  // Scan the text on a line-by-line basis first.\n  var a = this.diff_linesToChars_(text1, text2);\n  text1 = a.chars1;\n  text2 = a.chars2;\n  var linearray = a.lineArray;\n\n  var diffs = this.diff_main(text1, text2, false, deadline);\n\n  // Convert the diff back to original text.\n  this.diff_charsToLines_(diffs, linearray);\n  // Eliminate freak matches (e.g. blank lines)\n  this.diff_cleanupSemantic(diffs);\n\n  // Rediff any replacement blocks, this time character-by-character.\n  // Add a dummy entry at the end.\n  diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, ''));\n  var pointer = 0;\n  var count_delete = 0;\n  var count_insert = 0;\n  var text_delete = '';\n  var text_insert = '';\n  while (pointer < diffs.length) {\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        count_insert++;\n        text_insert += diffs[pointer][1];\n        break;\n      case DIFF_DELETE:\n        count_delete++;\n        text_delete += diffs[pointer][1];\n        break;\n      case DIFF_EQUAL:\n        // Upon reaching an equality, check for prior redundancies.\n        if (count_delete >= 1 && count_insert >= 1) {\n          // Delete the offending records and add the merged ones.\n          diffs.splice(pointer - count_delete - count_insert,\n                       count_delete + count_insert);\n          pointer = pointer - count_delete - count_insert;\n          var subDiff =\n              this.diff_main(text_delete, text_insert, false, deadline);\n          for (var j = subDiff.length - 1; j >= 0; j--) {\n            diffs.splice(pointer, 0, subDiff[j]);\n          }\n          pointer = pointer + subDiff.length;\n        }\n        count_insert = 0;\n        count_delete = 0;\n        text_delete = '';\n        text_insert = '';\n        break;\n    }\n    pointer++;\n  }\n  diffs.pop();  // Remove the dummy entry at the end.\n\n  return diffs;\n};\n\n\n/**\n * Find the 'middle snake' of a diff, split the problem in two\n * and return the recursively constructed diff.\n * See Myers 1986 paper: An O(ND) Difference Algorithm and Its Variations.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {number} deadline Time at which to bail if not yet complete.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @private\n */\ndiff_match_patch.prototype.diff_bisect_ = function(text1, text2, deadline) {\n  // Cache the text lengths to prevent multiple calls.\n  var text1_length = text1.length;\n  var text2_length = text2.length;\n  var max_d = Math.ceil((text1_length + text2_length) / 2);\n  var v_offset = max_d;\n  var v_length = 2 * max_d;\n  var v1 = new Array(v_length);\n  var v2 = new Array(v_length);\n  // Setting all elements to -1 is faster in Chrome & Firefox than mixing\n  // integers and undefined.\n  for (var x = 0; x < v_length; x++) {\n    v1[x] = -1;\n    v2[x] = -1;\n  }\n  v1[v_offset + 1] = 0;\n  v2[v_offset + 1] = 0;\n  var delta = text1_length - text2_length;\n  // If the total number of characters is odd, then the front path will collide\n  // with the reverse path.\n  var front = (delta % 2 != 0);\n  // Offsets for start and end of k loop.\n  // Prevents mapping of space beyond the grid.\n  var k1start = 0;\n  var k1end = 0;\n  var k2start = 0;\n  var k2end = 0;\n  for (var d = 0; d < max_d; d++) {\n    // Bail out if deadline is reached.\n    if ((new Date()).getTime() > deadline) {\n      break;\n    }\n\n    // Walk the front path one step.\n    for (var k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {\n      var k1_offset = v_offset + k1;\n      var x1;\n      if (k1 == -d || (k1 != d && v1[k1_offset - 1] < v1[k1_offset + 1])) {\n        x1 = v1[k1_offset + 1];\n      } else {\n        x1 = v1[k1_offset - 1] + 1;\n      }\n      var y1 = x1 - k1;\n      while (x1 < text1_length && y1 < text2_length &&\n             text1.charAt(x1) == text2.charAt(y1)) {\n        x1++;\n        y1++;\n      }\n      v1[k1_offset] = x1;\n      if (x1 > text1_length) {\n        // Ran off the right of the graph.\n        k1end += 2;\n      } else if (y1 > text2_length) {\n        // Ran off the bottom of the graph.\n        k1start += 2;\n      } else if (front) {\n        var k2_offset = v_offset + delta - k1;\n        if (k2_offset >= 0 && k2_offset < v_length && v2[k2_offset] != -1) {\n          // Mirror x2 onto top-left coordinate system.\n          var x2 = text1_length - v2[k2_offset];\n          if (x1 >= x2) {\n            // Overlap detected.\n            return this.diff_bisectSplit_(text1, text2, x1, y1, deadline);\n          }\n        }\n      }\n    }\n\n    // Walk the reverse path one step.\n    for (var k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {\n      var k2_offset = v_offset + k2;\n      var x2;\n      if (k2 == -d || (k2 != d && v2[k2_offset - 1] < v2[k2_offset + 1])) {\n        x2 = v2[k2_offset + 1];\n      } else {\n        x2 = v2[k2_offset - 1] + 1;\n      }\n      var y2 = x2 - k2;\n      while (x2 < text1_length && y2 < text2_length &&\n             text1.charAt(text1_length - x2 - 1) ==\n             text2.charAt(text2_length - y2 - 1)) {\n        x2++;\n        y2++;\n      }\n      v2[k2_offset] = x2;\n      if (x2 > text1_length) {\n        // Ran off the left of the graph.\n        k2end += 2;\n      } else if (y2 > text2_length) {\n        // Ran off the top of the graph.\n        k2start += 2;\n      } else if (!front) {\n        var k1_offset = v_offset + delta - k2;\n        if (k1_offset >= 0 && k1_offset < v_length && v1[k1_offset] != -1) {\n          var x1 = v1[k1_offset];\n          var y1 = v_offset + x1 - k1_offset;\n          // Mirror x2 onto top-left coordinate system.\n          x2 = text1_length - x2;\n          if (x1 >= x2) {\n            // Overlap detected.\n            return this.diff_bisectSplit_(text1, text2, x1, y1, deadline);\n          }\n        }\n      }\n    }\n  }\n  // Diff took too long and hit the deadline or\n  // number of diffs equals number of characters, no commonality at all.\n  return [new diff_match_patch.Diff(DIFF_DELETE, text1),\n          new diff_match_patch.Diff(DIFF_INSERT, text2)];\n};\n\n\n/**\n * Given the location of the 'middle snake', split the diff in two parts\n * and recurse.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {number} x Index of split point in text1.\n * @param {number} y Index of split point in text2.\n * @param {number} deadline Time at which to bail if not yet complete.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @private\n */\ndiff_match_patch.prototype.diff_bisectSplit_ = function(text1, text2, x, y,\n    deadline) {\n  var text1a = text1.substring(0, x);\n  var text2a = text2.substring(0, y);\n  var text1b = text1.substring(x);\n  var text2b = text2.substring(y);\n\n  // Compute both diffs serially.\n  var diffs = this.diff_main(text1a, text2a, false, deadline);\n  var diffsb = this.diff_main(text1b, text2b, false, deadline);\n\n  return diffs.concat(diffsb);\n};\n\n\n/**\n * Split two texts into an array of strings.  Reduce the texts to a string of\n * hashes where each Unicode character represents one line.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {{chars1: string, chars2: string, lineArray: !Array.<string>}}\n *     An object containing the encoded text1, the encoded text2 and\n *     the array of unique strings.\n *     The zeroth element of the array of unique strings is intentionally blank.\n * @private\n */\ndiff_match_patch.prototype.diff_linesToChars_ = function(text1, text2) {\n  var lineArray = [];  // e.g. lineArray[4] == 'Hello\\n'\n  var lineHash = {};   // e.g. lineHash['Hello\\n'] == 4\n\n  // '\\x00' is a valid character, but various debuggers don't like it.\n  // So we'll insert a junk entry to avoid generating a null character.\n  lineArray[0] = '';\n\n  /**\n   * Split a text into an array of strings.  Reduce the texts to a string of\n   * hashes where each Unicode character represents one line.\n   * Modifies linearray and linehash through being a closure.\n   * @param {string} text String to encode.\n   * @return {string} Encoded string.\n   * @private\n   */\n  function diff_linesToCharsMunge_(text) {\n    var chars = '';\n    // Walk the text, pulling out a substring for each line.\n    // text.split('\\n') would would temporarily double our memory footprint.\n    // Modifying text would create many large strings to garbage collect.\n    var lineStart = 0;\n    var lineEnd = -1;\n    // Keeping our own length variable is faster than looking it up.\n    var lineArrayLength = lineArray.length;\n    while (lineEnd < text.length - 1) {\n      lineEnd = text.indexOf('\\n', lineStart);\n      if (lineEnd == -1) {\n        lineEnd = text.length - 1;\n      }\n      var line = text.substring(lineStart, lineEnd + 1);\n\n      if (lineHash.hasOwnProperty ? lineHash.hasOwnProperty(line) :\n          (lineHash[line] !== undefined)) {\n        chars += String.fromCharCode(lineHash[line]);\n      } else {\n        if (lineArrayLength == maxLines) {\n          // Bail out at 65535 because\n          // String.fromCharCode(65536) == String.fromCharCode(0)\n          line = text.substring(lineStart);\n          lineEnd = text.length;\n        }\n        chars += String.fromCharCode(lineArrayLength);\n        lineHash[line] = lineArrayLength;\n        lineArray[lineArrayLength++] = line;\n      }\n      lineStart = lineEnd + 1;\n    }\n    return chars;\n  }\n  // Allocate 2/3rds of the space for text1, the rest for text2.\n  var maxLines = 40000;\n  var chars1 = diff_linesToCharsMunge_(text1);\n  maxLines = 65535;\n  var chars2 = diff_linesToCharsMunge_(text2);\n  return {chars1: chars1, chars2: chars2, lineArray: lineArray};\n};\n\n\n/**\n * Rehydrate the text in a diff from a string of line hashes to real lines of\n * text.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @param {!Array.<string>} lineArray Array of unique strings.\n * @private\n */\ndiff_match_patch.prototype.diff_charsToLines_ = function(diffs, lineArray) {\n  for (var i = 0; i < diffs.length; i++) {\n    var chars = diffs[i][1];\n    var text = [];\n    for (var j = 0; j < chars.length; j++) {\n      text[j] = lineArray[chars.charCodeAt(j)];\n    }\n    diffs[i][1] = text.join('');\n  }\n};\n\n\n/**\n * Determine the common prefix of two strings.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the start of each\n *     string.\n */\ndiff_match_patch.prototype.diff_commonPrefix = function(text1, text2) {\n  // Quick check for common null cases.\n  if (!text1 || !text2 || text1.charAt(0) != text2.charAt(0)) {\n    return 0;\n  }\n  // Binary search.\n  // Performance analysis: https://neil.fraser.name/news/2007/10/09/\n  var pointermin = 0;\n  var pointermax = Math.min(text1.length, text2.length);\n  var pointermid = pointermax;\n  var pointerstart = 0;\n  while (pointermin < pointermid) {\n    if (text1.substring(pointerstart, pointermid) ==\n        text2.substring(pointerstart, pointermid)) {\n      pointermin = pointermid;\n      pointerstart = pointermin;\n    } else {\n      pointermax = pointermid;\n    }\n    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n  }\n  return pointermid;\n};\n\n\n/**\n * Determine the common suffix of two strings.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the end of each string.\n */\ndiff_match_patch.prototype.diff_commonSuffix = function(text1, text2) {\n  // Quick check for common null cases.\n  if (!text1 || !text2 ||\n      text1.charAt(text1.length - 1) != text2.charAt(text2.length - 1)) {\n    return 0;\n  }\n  // Binary search.\n  // Performance analysis: https://neil.fraser.name/news/2007/10/09/\n  var pointermin = 0;\n  var pointermax = Math.min(text1.length, text2.length);\n  var pointermid = pointermax;\n  var pointerend = 0;\n  while (pointermin < pointermid) {\n    if (text1.substring(text1.length - pointermid, text1.length - pointerend) ==\n        text2.substring(text2.length - pointermid, text2.length - pointerend)) {\n      pointermin = pointermid;\n      pointerend = pointermin;\n    } else {\n      pointermax = pointermid;\n    }\n    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n  }\n  return pointermid;\n};\n\n\n/**\n * Determine if the suffix of one string is the prefix of another.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the end of the first\n *     string and the start of the second string.\n * @private\n */\ndiff_match_patch.prototype.diff_commonOverlap_ = function(text1, text2) {\n  // Cache the text lengths to prevent multiple calls.\n  var text1_length = text1.length;\n  var text2_length = text2.length;\n  // Eliminate the null case.\n  if (text1_length == 0 || text2_length == 0) {\n    return 0;\n  }\n  // Truncate the longer string.\n  if (text1_length > text2_length) {\n    text1 = text1.substring(text1_length - text2_length);\n  } else if (text1_length < text2_length) {\n    text2 = text2.substring(0, text1_length);\n  }\n  var text_length = Math.min(text1_length, text2_length);\n  // Quick check for the worst case.\n  if (text1 == text2) {\n    return text_length;\n  }\n\n  // Start by looking for a single character match\n  // and increase length until no match is found.\n  // Performance analysis: https://neil.fraser.name/news/2010/11/04/\n  var best = 0;\n  var length = 1;\n  while (true) {\n    var pattern = text1.substring(text_length - length);\n    var found = text2.indexOf(pattern);\n    if (found == -1) {\n      return best;\n    }\n    length += found;\n    if (found == 0 || text1.substring(text_length - length) ==\n        text2.substring(0, length)) {\n      best = length;\n      length++;\n    }\n  }\n};\n\n\n/**\n * Do the two texts share a substring which is at least half the length of the\n * longer text?\n * This speedup can produce non-minimal diffs.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {Array.<string>} Five element Array, containing the prefix of\n *     text1, the suffix of text1, the prefix of text2, the suffix of\n *     text2 and the common middle.  Or null if there was no match.\n * @private\n */\ndiff_match_patch.prototype.diff_halfMatch_ = function(text1, text2) {\n  if (this.Diff_Timeout <= 0) {\n    // Don't risk returning a non-optimal diff if we have unlimited time.\n    return null;\n  }\n  var longtext = text1.length > text2.length ? text1 : text2;\n  var shorttext = text1.length > text2.length ? text2 : text1;\n  if (longtext.length < 4 || shorttext.length * 2 < longtext.length) {\n    return null;  // Pointless.\n  }\n  var dmp = this;  // 'this' becomes 'window' in a closure.\n\n  /**\n   * Does a substring of shorttext exist within longtext such that the substring\n   * is at least half the length of longtext?\n   * Closure, but does not reference any external variables.\n   * @param {string} longtext Longer string.\n   * @param {string} shorttext Shorter string.\n   * @param {number} i Start index of quarter length substring within longtext.\n   * @return {Array.<string>} Five element Array, containing the prefix of\n   *     longtext, the suffix of longtext, the prefix of shorttext, the suffix\n   *     of shorttext and the common middle.  Or null if there was no match.\n   * @private\n   */\n  function diff_halfMatchI_(longtext, shorttext, i) {\n    // Start with a 1/4 length substring at position i as a seed.\n    var seed = longtext.substring(i, i + Math.floor(longtext.length / 4));\n    var j = -1;\n    var best_common = '';\n    var best_longtext_a, best_longtext_b, best_shorttext_a, best_shorttext_b;\n    while ((j = shorttext.indexOf(seed, j + 1)) != -1) {\n      var prefixLength = dmp.diff_commonPrefix(longtext.substring(i),\n                                               shorttext.substring(j));\n      var suffixLength = dmp.diff_commonSuffix(longtext.substring(0, i),\n                                               shorttext.substring(0, j));\n      if (best_common.length < suffixLength + prefixLength) {\n        best_common = shorttext.substring(j - suffixLength, j) +\n            shorttext.substring(j, j + prefixLength);\n        best_longtext_a = longtext.substring(0, i - suffixLength);\n        best_longtext_b = longtext.substring(i + prefixLength);\n        best_shorttext_a = shorttext.substring(0, j - suffixLength);\n        best_shorttext_b = shorttext.substring(j + prefixLength);\n      }\n    }\n    if (best_common.length * 2 >= longtext.length) {\n      return [best_longtext_a, best_longtext_b,\n              best_shorttext_a, best_shorttext_b, best_common];\n    } else {\n      return null;\n    }\n  }\n\n  // First check if the second quarter is the seed for a half-match.\n  var hm1 = diff_halfMatchI_(longtext, shorttext,\n                             Math.ceil(longtext.length / 4));\n  // Check again based on the third quarter.\n  var hm2 = diff_halfMatchI_(longtext, shorttext,\n                             Math.ceil(longtext.length / 2));\n  var hm;\n  if (!hm1 && !hm2) {\n    return null;\n  } else if (!hm2) {\n    hm = hm1;\n  } else if (!hm1) {\n    hm = hm2;\n  } else {\n    // Both matched.  Select the longest.\n    hm = hm1[4].length > hm2[4].length ? hm1 : hm2;\n  }\n\n  // A half-match was found, sort out the return data.\n  var text1_a, text1_b, text2_a, text2_b;\n  if (text1.length > text2.length) {\n    text1_a = hm[0];\n    text1_b = hm[1];\n    text2_a = hm[2];\n    text2_b = hm[3];\n  } else {\n    text2_a = hm[0];\n    text2_b = hm[1];\n    text1_a = hm[2];\n    text1_b = hm[3];\n  }\n  var mid_common = hm[4];\n  return [text1_a, text1_b, text2_a, text2_b, mid_common];\n};\n\n\n/**\n * Reduce the number of edits by eliminating semantically trivial equalities.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n */\ndiff_match_patch.prototype.diff_cleanupSemantic = function(diffs) {\n  var changes = false;\n  var equalities = [];  // Stack of indices where equalities are found.\n  var equalitiesLength = 0;  // Keeping our own length var is faster in JS.\n  /** @type {?string} */\n  var lastEquality = null;\n  // Always equal to diffs[equalities[equalitiesLength - 1]][1]\n  var pointer = 0;  // Index of current position.\n  // Number of characters that changed prior to the equality.\n  var length_insertions1 = 0;\n  var length_deletions1 = 0;\n  // Number of characters that changed after the equality.\n  var length_insertions2 = 0;\n  var length_deletions2 = 0;\n  while (pointer < diffs.length) {\n    if (diffs[pointer][0] == DIFF_EQUAL) {  // Equality found.\n      equalities[equalitiesLength++] = pointer;\n      length_insertions1 = length_insertions2;\n      length_deletions1 = length_deletions2;\n      length_insertions2 = 0;\n      length_deletions2 = 0;\n      lastEquality = diffs[pointer][1];\n    } else {  // An insertion or deletion.\n      if (diffs[pointer][0] == DIFF_INSERT) {\n        length_insertions2 += diffs[pointer][1].length;\n      } else {\n        length_deletions2 += diffs[pointer][1].length;\n      }\n      // Eliminate an equality that is smaller or equal to the edits on both\n      // sides of it.\n      if (lastEquality && (lastEquality.length <=\n          Math.max(length_insertions1, length_deletions1)) &&\n          (lastEquality.length <= Math.max(length_insertions2,\n                                           length_deletions2))) {\n        // Duplicate record.\n        diffs.splice(equalities[equalitiesLength - 1], 0,\n                     new diff_match_patch.Diff(DIFF_DELETE, lastEquality));\n        // Change second copy to insert.\n        diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT;\n        // Throw away the equality we just deleted.\n        equalitiesLength--;\n        // Throw away the previous equality (it needs to be reevaluated).\n        equalitiesLength--;\n        pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1;\n        length_insertions1 = 0;  // Reset the counters.\n        length_deletions1 = 0;\n        length_insertions2 = 0;\n        length_deletions2 = 0;\n        lastEquality = null;\n        changes = true;\n      }\n    }\n    pointer++;\n  }\n\n  // Normalize the diff.\n  if (changes) {\n    this.diff_cleanupMerge(diffs);\n  }\n  this.diff_cleanupSemanticLossless(diffs);\n\n  // Find any overlaps between deletions and insertions.\n  // e.g: <del>abcxxx</del><ins>xxxdef</ins>\n  //   -> <del>abc</del>xxx<ins>def</ins>\n  // e.g: <del>xxxabc</del><ins>defxxx</ins>\n  //   -> <ins>def</ins>xxx<del>abc</del>\n  // Only extract an overlap if it is as big as the edit ahead or behind it.\n  pointer = 1;\n  while (pointer < diffs.length) {\n    if (diffs[pointer - 1][0] == DIFF_DELETE &&\n        diffs[pointer][0] == DIFF_INSERT) {\n      var deletion = diffs[pointer - 1][1];\n      var insertion = diffs[pointer][1];\n      var overlap_length1 = this.diff_commonOverlap_(deletion, insertion);\n      var overlap_length2 = this.diff_commonOverlap_(insertion, deletion);\n      if (overlap_length1 >= overlap_length2) {\n        if (overlap_length1 >= deletion.length / 2 ||\n            overlap_length1 >= insertion.length / 2) {\n          // Overlap found.  Insert an equality and trim the surrounding edits.\n          diffs.splice(pointer, 0, new diff_match_patch.Diff(DIFF_EQUAL,\n              insertion.substring(0, overlap_length1)));\n          diffs[pointer - 1][1] =\n              deletion.substring(0, deletion.length - overlap_length1);\n          diffs[pointer + 1][1] = insertion.substring(overlap_length1);\n          pointer++;\n        }\n      } else {\n        if (overlap_length2 >= deletion.length / 2 ||\n            overlap_length2 >= insertion.length / 2) {\n          // Reverse overlap found.\n          // Insert an equality and swap and trim the surrounding edits.\n          diffs.splice(pointer, 0, new diff_match_patch.Diff(DIFF_EQUAL,\n              deletion.substring(0, overlap_length2)));\n          diffs[pointer - 1][0] = DIFF_INSERT;\n          diffs[pointer - 1][1] =\n              insertion.substring(0, insertion.length - overlap_length2);\n          diffs[pointer + 1][0] = DIFF_DELETE;\n          diffs[pointer + 1][1] =\n              deletion.substring(overlap_length2);\n          pointer++;\n        }\n      }\n      pointer++;\n    }\n    pointer++;\n  }\n};\n\n\n/**\n * Look for single edits surrounded on both sides by equalities\n * which can be shifted sideways to align the edit to a word boundary.\n * e.g: The c<ins>at c</ins>ame. -> The <ins>cat </ins>came.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n */\ndiff_match_patch.prototype.diff_cleanupSemanticLossless = function(diffs) {\n  /**\n   * Given two strings, compute a score representing whether the internal\n   * boundary falls on logical boundaries.\n   * Scores range from 6 (best) to 0 (worst).\n   * Closure, but does not reference any external variables.\n   * @param {string} one First string.\n   * @param {string} two Second string.\n   * @return {number} The score.\n   * @private\n   */\n  function diff_cleanupSemanticScore_(one, two) {\n    if (!one || !two) {\n      // Edges are the best.\n      return 6;\n    }\n\n    // Each port of this function behaves slightly differently due to\n    // subtle differences in each language's definition of things like\n    // 'whitespace'.  Since this function's purpose is largely cosmetic,\n    // the choice has been made to use each language's native features\n    // rather than force total conformity.\n    var char1 = one.charAt(one.length - 1);\n    var char2 = two.charAt(0);\n    var nonAlphaNumeric1 = char1.match(diff_match_patch.nonAlphaNumericRegex_);\n    var nonAlphaNumeric2 = char2.match(diff_match_patch.nonAlphaNumericRegex_);\n    var whitespace1 = nonAlphaNumeric1 &&\n        char1.match(diff_match_patch.whitespaceRegex_);\n    var whitespace2 = nonAlphaNumeric2 &&\n        char2.match(diff_match_patch.whitespaceRegex_);\n    var lineBreak1 = whitespace1 &&\n        char1.match(diff_match_patch.linebreakRegex_);\n    var lineBreak2 = whitespace2 &&\n        char2.match(diff_match_patch.linebreakRegex_);\n    var blankLine1 = lineBreak1 &&\n        one.match(diff_match_patch.blanklineEndRegex_);\n    var blankLine2 = lineBreak2 &&\n        two.match(diff_match_patch.blanklineStartRegex_);\n\n    if (blankLine1 || blankLine2) {\n      // Five points for blank lines.\n      return 5;\n    } else if (lineBreak1 || lineBreak2) {\n      // Four points for line breaks.\n      return 4;\n    } else if (nonAlphaNumeric1 && !whitespace1 && whitespace2) {\n      // Three points for end of sentences.\n      return 3;\n    } else if (whitespace1 || whitespace2) {\n      // Two points for whitespace.\n      return 2;\n    } else if (nonAlphaNumeric1 || nonAlphaNumeric2) {\n      // One point for non-alphanumeric.\n      return 1;\n    }\n    return 0;\n  }\n\n  var pointer = 1;\n  // Intentionally ignore the first and last element (don't need checking).\n  while (pointer < diffs.length - 1) {\n    if (diffs[pointer - 1][0] == DIFF_EQUAL &&\n        diffs[pointer + 1][0] == DIFF_EQUAL) {\n      // This is a single edit surrounded by equalities.\n      var equality1 = diffs[pointer - 1][1];\n      var edit = diffs[pointer][1];\n      var equality2 = diffs[pointer + 1][1];\n\n      // First, shift the edit as far left as possible.\n      var commonOffset = this.diff_commonSuffix(equality1, edit);\n      if (commonOffset) {\n        var commonString = edit.substring(edit.length - commonOffset);\n        equality1 = equality1.substring(0, equality1.length - commonOffset);\n        edit = commonString + edit.substring(0, edit.length - commonOffset);\n        equality2 = commonString + equality2;\n      }\n\n      // Second, step character by character right, looking for the best fit.\n      var bestEquality1 = equality1;\n      var bestEdit = edit;\n      var bestEquality2 = equality2;\n      var bestScore = diff_cleanupSemanticScore_(equality1, edit) +\n          diff_cleanupSemanticScore_(edit, equality2);\n      while (edit.charAt(0) === equality2.charAt(0)) {\n        equality1 += edit.charAt(0);\n        edit = edit.substring(1) + equality2.charAt(0);\n        equality2 = equality2.substring(1);\n        var score = diff_cleanupSemanticScore_(equality1, edit) +\n            diff_cleanupSemanticScore_(edit, equality2);\n        // The >= encourages trailing rather than leading whitespace on edits.\n        if (score >= bestScore) {\n          bestScore = score;\n          bestEquality1 = equality1;\n          bestEdit = edit;\n          bestEquality2 = equality2;\n        }\n      }\n\n      if (diffs[pointer - 1][1] != bestEquality1) {\n        // We have an improvement, save it back to the diff.\n        if (bestEquality1) {\n          diffs[pointer - 1][1] = bestEquality1;\n        } else {\n          diffs.splice(pointer - 1, 1);\n          pointer--;\n        }\n        diffs[pointer][1] = bestEdit;\n        if (bestEquality2) {\n          diffs[pointer + 1][1] = bestEquality2;\n        } else {\n          diffs.splice(pointer + 1, 1);\n          pointer--;\n        }\n      }\n    }\n    pointer++;\n  }\n};\n\n// Define some regex patterns for matching boundaries.\ndiff_match_patch.nonAlphaNumericRegex_ = /[^a-zA-Z0-9]/;\ndiff_match_patch.whitespaceRegex_ = /\\s/;\ndiff_match_patch.linebreakRegex_ = /[\\r\\n]/;\ndiff_match_patch.blanklineEndRegex_ = /\\n\\r?\\n$/;\ndiff_match_patch.blanklineStartRegex_ = /^\\r?\\n\\r?\\n/;\n\n/**\n * Reduce the number of edits by eliminating operationally trivial equalities.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n */\ndiff_match_patch.prototype.diff_cleanupEfficiency = function(diffs) {\n  var changes = false;\n  var equalities = [];  // Stack of indices where equalities are found.\n  var equalitiesLength = 0;  // Keeping our own length var is faster in JS.\n  /** @type {?string} */\n  var lastEquality = null;\n  // Always equal to diffs[equalities[equalitiesLength - 1]][1]\n  var pointer = 0;  // Index of current position.\n  // Is there an insertion operation before the last equality.\n  var pre_ins = false;\n  // Is there a deletion operation before the last equality.\n  var pre_del = false;\n  // Is there an insertion operation after the last equality.\n  var post_ins = false;\n  // Is there a deletion operation after the last equality.\n  var post_del = false;\n  while (pointer < diffs.length) {\n    if (diffs[pointer][0] == DIFF_EQUAL) {  // Equality found.\n      if (diffs[pointer][1].length < this.Diff_EditCost &&\n          (post_ins || post_del)) {\n        // Candidate found.\n        equalities[equalitiesLength++] = pointer;\n        pre_ins = post_ins;\n        pre_del = post_del;\n        lastEquality = diffs[pointer][1];\n      } else {\n        // Not a candidate, and can never become one.\n        equalitiesLength = 0;\n        lastEquality = null;\n      }\n      post_ins = post_del = false;\n    } else {  // An insertion or deletion.\n      if (diffs[pointer][0] == DIFF_DELETE) {\n        post_del = true;\n      } else {\n        post_ins = true;\n      }\n      /*\n       * Five types to be split:\n       * <ins>A</ins><del>B</del>XY<ins>C</ins><del>D</del>\n       * <ins>A</ins>X<ins>C</ins><del>D</del>\n       * <ins>A</ins><del>B</del>X<ins>C</ins>\n       * <ins>A</del>X<ins>C</ins><del>D</del>\n       * <ins>A</ins><del>B</del>X<del>C</del>\n       */\n      if (lastEquality && ((pre_ins && pre_del && post_ins && post_del) ||\n                           ((lastEquality.length < this.Diff_EditCost / 2) &&\n                            (pre_ins + pre_del + post_ins + post_del) == 3))) {\n        // Duplicate record.\n        diffs.splice(equalities[equalitiesLength - 1], 0,\n                     new diff_match_patch.Diff(DIFF_DELETE, lastEquality));\n        // Change second copy to insert.\n        diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT;\n        equalitiesLength--;  // Throw away the equality we just deleted;\n        lastEquality = null;\n        if (pre_ins && pre_del) {\n          // No changes made which could affect previous entry, keep going.\n          post_ins = post_del = true;\n          equalitiesLength = 0;\n        } else {\n          equalitiesLength--;  // Throw away the previous equality.\n          pointer = equalitiesLength > 0 ?\n              equalities[equalitiesLength - 1] : -1;\n          post_ins = post_del = false;\n        }\n        changes = true;\n      }\n    }\n    pointer++;\n  }\n\n  if (changes) {\n    this.diff_cleanupMerge(diffs);\n  }\n};\n\n\n/**\n * Reorder and merge like edit sections.  Merge equalities.\n * Any edit section can move as long as it doesn't cross an equality.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n */\ndiff_match_patch.prototype.diff_cleanupMerge = function(diffs) {\n  // Add a dummy entry at the end.\n  diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, ''));\n  var pointer = 0;\n  var count_delete = 0;\n  var count_insert = 0;\n  var text_delete = '';\n  var text_insert = '';\n  var commonlength;\n  while (pointer < diffs.length) {\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        count_insert++;\n        text_insert += diffs[pointer][1];\n        pointer++;\n        break;\n      case DIFF_DELETE:\n        count_delete++;\n        text_delete += diffs[pointer][1];\n        pointer++;\n        break;\n      case DIFF_EQUAL:\n        // Upon reaching an equality, check for prior redundancies.\n        if (count_delete + count_insert > 1) {\n          if (count_delete !== 0 && count_insert !== 0) {\n            // Factor out any common prefixies.\n            commonlength = this.diff_commonPrefix(text_insert, text_delete);\n            if (commonlength !== 0) {\n              if ((pointer - count_delete - count_insert) > 0 &&\n                  diffs[pointer - count_delete - count_insert - 1][0] ==\n                  DIFF_EQUAL) {\n                diffs[pointer - count_delete - count_insert - 1][1] +=\n                    text_insert.substring(0, commonlength);\n              } else {\n                diffs.splice(0, 0, new diff_match_patch.Diff(DIFF_EQUAL,\n                    text_insert.substring(0, commonlength)));\n                pointer++;\n              }\n              text_insert = text_insert.substring(commonlength);\n              text_delete = text_delete.substring(commonlength);\n            }\n            // Factor out any common suffixies.\n            commonlength = this.diff_commonSuffix(text_insert, text_delete);\n            if (commonlength !== 0) {\n              diffs[pointer][1] = text_insert.substring(text_insert.length -\n                  commonlength) + diffs[pointer][1];\n              text_insert = text_insert.substring(0, text_insert.length -\n                  commonlength);\n              text_delete = text_delete.substring(0, text_delete.length -\n                  commonlength);\n            }\n          }\n          // Delete the offending records and add the merged ones.\n          pointer -= count_delete + count_insert;\n          diffs.splice(pointer, count_delete + count_insert);\n          if (text_delete.length) {\n            diffs.splice(pointer, 0,\n                new diff_match_patch.Diff(DIFF_DELETE, text_delete));\n            pointer++;\n          }\n          if (text_insert.length) {\n            diffs.splice(pointer, 0,\n                new diff_match_patch.Diff(DIFF_INSERT, text_insert));\n            pointer++;\n          }\n          pointer++;\n        } else if (pointer !== 0 && diffs[pointer - 1][0] == DIFF_EQUAL) {\n          // Merge this equality with the previous one.\n          diffs[pointer - 1][1] += diffs[pointer][1];\n          diffs.splice(pointer, 1);\n        } else {\n          pointer++;\n        }\n        count_insert = 0;\n        count_delete = 0;\n        text_delete = '';\n        text_insert = '';\n        break;\n    }\n  }\n  if (diffs[diffs.length - 1][1] === '') {\n    diffs.pop();  // Remove the dummy entry at the end.\n  }\n\n  // Second pass: look for single edits surrounded on both sides by equalities\n  // which can be shifted sideways to eliminate an equality.\n  // e.g: A<ins>BA</ins>C -> <ins>AB</ins>AC\n  var changes = false;\n  pointer = 1;\n  // Intentionally ignore the first and last element (don't need checking).\n  while (pointer < diffs.length - 1) {\n    if (diffs[pointer - 1][0] == DIFF_EQUAL &&\n        diffs[pointer + 1][0] == DIFF_EQUAL) {\n      // This is a single edit surrounded by equalities.\n      if (diffs[pointer][1].substring(diffs[pointer][1].length -\n          diffs[pointer - 1][1].length) == diffs[pointer - 1][1]) {\n        // Shift the edit over the previous equality.\n        diffs[pointer][1] = diffs[pointer - 1][1] +\n            diffs[pointer][1].substring(0, diffs[pointer][1].length -\n                                        diffs[pointer - 1][1].length);\n        diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1];\n        diffs.splice(pointer - 1, 1);\n        changes = true;\n      } else if (diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) ==\n          diffs[pointer + 1][1]) {\n        // Shift the edit over the next equality.\n        diffs[pointer - 1][1] += diffs[pointer + 1][1];\n        diffs[pointer][1] =\n            diffs[pointer][1].substring(diffs[pointer + 1][1].length) +\n            diffs[pointer + 1][1];\n        diffs.splice(pointer + 1, 1);\n        changes = true;\n      }\n    }\n    pointer++;\n  }\n  // If shifts were made, the diff needs reordering and another shift sweep.\n  if (changes) {\n    this.diff_cleanupMerge(diffs);\n  }\n};\n\n\n/**\n * loc is a location in text1, compute and return the equivalent location in\n * text2.\n * e.g. 'The cat' vs 'The big cat', 1->1, 5->8\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @param {number} loc Location within text1.\n * @return {number} Location within text2.\n */\ndiff_match_patch.prototype.diff_xIndex = function(diffs, loc) {\n  var chars1 = 0;\n  var chars2 = 0;\n  var last_chars1 = 0;\n  var last_chars2 = 0;\n  var x;\n  for (x = 0; x < diffs.length; x++) {\n    if (diffs[x][0] !== DIFF_INSERT) {  // Equality or deletion.\n      chars1 += diffs[x][1].length;\n    }\n    if (diffs[x][0] !== DIFF_DELETE) {  // Equality or insertion.\n      chars2 += diffs[x][1].length;\n    }\n    if (chars1 > loc) {  // Overshot the location.\n      break;\n    }\n    last_chars1 = chars1;\n    last_chars2 = chars2;\n  }\n  // Was the location was deleted?\n  if (diffs.length != x && diffs[x][0] === DIFF_DELETE) {\n    return last_chars2;\n  }\n  // Add the remaining character length.\n  return last_chars2 + (loc - last_chars1);\n};\n\n\n/**\n * Convert a diff array into a pretty HTML report.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {string} HTML representation.\n */\ndiff_match_patch.prototype.diff_prettyHtml = function(diffs) {\n  var html = [];\n  var pattern_amp = /&/g;\n  var pattern_lt = /</g;\n  var pattern_gt = />/g;\n  var pattern_para = /\\n/g;\n  for (var x = 0; x < diffs.length; x++) {\n    var op = diffs[x][0];    // Operation (insert, delete, equal)\n    var data = diffs[x][1];  // Text of change.\n    var text = data.replace(pattern_amp, '&amp;').replace(pattern_lt, '&lt;')\n        .replace(pattern_gt, '&gt;').replace(pattern_para, '&para;<br>');\n    switch (op) {\n      case DIFF_INSERT:\n        html[x] = '<ins style=\"background:#e6ffe6;\">' + text + '</ins>';\n        break;\n      case DIFF_DELETE:\n        html[x] = '<del style=\"background:#ffe6e6;\">' + text + '</del>';\n        break;\n      case DIFF_EQUAL:\n        html[x] = '<span>' + text + '</span>';\n        break;\n    }\n  }\n  return html.join('');\n};\n\n\n/**\n * Compute and return the source text (all equalities and deletions).\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {string} Source text.\n */\ndiff_match_patch.prototype.diff_text1 = function(diffs) {\n  var text = [];\n  for (var x = 0; x < diffs.length; x++) {\n    if (diffs[x][0] !== DIFF_INSERT) {\n      text[x] = diffs[x][1];\n    }\n  }\n  return text.join('');\n};\n\n\n/**\n * Compute and return the destination text (all equalities and insertions).\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {string} Destination text.\n */\ndiff_match_patch.prototype.diff_text2 = function(diffs) {\n  var text = [];\n  for (var x = 0; x < diffs.length; x++) {\n    if (diffs[x][0] !== DIFF_DELETE) {\n      text[x] = diffs[x][1];\n    }\n  }\n  return text.join('');\n};\n\n\n/**\n * Compute the Levenshtein distance; the number of inserted, deleted or\n * substituted characters.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {number} Number of changes.\n */\ndiff_match_patch.prototype.diff_levenshtein = function(diffs) {\n  var levenshtein = 0;\n  var insertions = 0;\n  var deletions = 0;\n  for (var x = 0; x < diffs.length; x++) {\n    var op = diffs[x][0];\n    var data = diffs[x][1];\n    switch (op) {\n      case DIFF_INSERT:\n        insertions += data.length;\n        break;\n      case DIFF_DELETE:\n        deletions += data.length;\n        break;\n      case DIFF_EQUAL:\n        // A deletion and an insertion is one substitution.\n        levenshtein += Math.max(insertions, deletions);\n        insertions = 0;\n        deletions = 0;\n        break;\n    }\n  }\n  levenshtein += Math.max(insertions, deletions);\n  return levenshtein;\n};\n\n\n/**\n * Crush the diff into an encoded string which describes the operations\n * required to transform text1 into text2.\n * E.g. =3\\t-2\\t+ing  -> Keep 3 chars, delete 2 chars, insert 'ing'.\n * Operations are tab-separated.  Inserted text is escaped using %xx notation.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {string} Delta text.\n */\ndiff_match_patch.prototype.diff_toDelta = function(diffs) {\n  var text = [];\n  for (var x = 0; x < diffs.length; x++) {\n    switch (diffs[x][0]) {\n      case DIFF_INSERT:\n        text[x] = '+' + encodeURI(diffs[x][1]);\n        break;\n      case DIFF_DELETE:\n        text[x] = '-' + diffs[x][1].length;\n        break;\n      case DIFF_EQUAL:\n        text[x] = '=' + diffs[x][1].length;\n        break;\n    }\n  }\n  return text.join('\\t').replace(/%20/g, ' ');\n};\n\n\n/**\n * Given the original text1, and an encoded string which describes the\n * operations required to transform text1 into text2, compute the full diff.\n * @param {string} text1 Source string for the diff.\n * @param {string} delta Delta text.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @throws {!Error} If invalid input.\n */\ndiff_match_patch.prototype.diff_fromDelta = function(text1, delta) {\n  var diffs = [];\n  var diffsLength = 0;  // Keeping our own length var is faster in JS.\n  var pointer = 0;  // Cursor in text1\n  var tokens = delta.split(/\\t/g);\n  for (var x = 0; x < tokens.length; x++) {\n    // Each token begins with a one character parameter which specifies the\n    // operation of this token (delete, insert, equality).\n    var param = tokens[x].substring(1);\n    switch (tokens[x].charAt(0)) {\n      case '+':\n        try {\n          diffs[diffsLength++] =\n              new diff_match_patch.Diff(DIFF_INSERT, decodeURI(param));\n        } catch (ex) {\n          // Malformed URI sequence.\n          throw new Error('Illegal escape in diff_fromDelta: ' + param);\n        }\n        break;\n      case '-':\n        // Fall through.\n      case '=':\n        var n = parseInt(param, 10);\n        if (isNaN(n) || n < 0) {\n          throw new Error('Invalid number in diff_fromDelta: ' + param);\n        }\n        var text = text1.substring(pointer, pointer += n);\n        if (tokens[x].charAt(0) == '=') {\n          diffs[diffsLength++] = new diff_match_patch.Diff(DIFF_EQUAL, text);\n        } else {\n          diffs[diffsLength++] = new diff_match_patch.Diff(DIFF_DELETE, text);\n        }\n        break;\n      default:\n        // Blank tokens are ok (from a trailing \\t).\n        // Anything else is an error.\n        if (tokens[x]) {\n          throw new Error('Invalid diff operation in diff_fromDelta: ' +\n                          tokens[x]);\n        }\n    }\n  }\n  if (pointer != text1.length) {\n    throw new Error('Delta length (' + pointer +\n        ') does not equal source text length (' + text1.length + ').');\n  }\n  return diffs;\n};\n\n\n//  MATCH FUNCTIONS\n\n\n/**\n * Locate the best instance of 'pattern' in 'text' near 'loc'.\n * @param {string} text The text to search.\n * @param {string} pattern The pattern to search for.\n * @param {number} loc The location to search around.\n * @return {number} Best match index or -1.\n */\ndiff_match_patch.prototype.match_main = function(text, pattern, loc) {\n  // Check for null inputs.\n  if (text == null || pattern == null || loc == null) {\n    throw new Error('Null input. (match_main)');\n  }\n\n  loc = Math.max(0, Math.min(loc, text.length));\n  if (text == pattern) {\n    // Shortcut (potentially not guaranteed by the algorithm)\n    return 0;\n  } else if (!text.length) {\n    // Nothing to match.\n    return -1;\n  } else if (text.substring(loc, loc + pattern.length) == pattern) {\n    // Perfect match at the perfect spot!  (Includes case of null pattern)\n    return loc;\n  } else {\n    // Do a fuzzy compare.\n    return this.match_bitap_(text, pattern, loc);\n  }\n};\n\n\n/**\n * Locate the best instance of 'pattern' in 'text' near 'loc' using the\n * Bitap algorithm.\n * @param {string} text The text to search.\n * @param {string} pattern The pattern to search for.\n * @param {number} loc The location to search around.\n * @return {number} Best match index or -1.\n * @private\n */\ndiff_match_patch.prototype.match_bitap_ = function(text, pattern, loc) {\n  if (pattern.length > this.Match_MaxBits) {\n    throw new Error('Pattern too long for this browser.');\n  }\n\n  // Initialise the alphabet.\n  var s = this.match_alphabet_(pattern);\n\n  var dmp = this;  // 'this' becomes 'window' in a closure.\n\n  /**\n   * Compute and return the score for a match with e errors and x location.\n   * Accesses loc and pattern through being a closure.\n   * @param {number} e Number of errors in match.\n   * @param {number} x Location of match.\n   * @return {number} Overall score for match (0.0 = good, 1.0 = bad).\n   * @private\n   */\n  function match_bitapScore_(e, x) {\n    var accuracy = e / pattern.length;\n    var proximity = Math.abs(loc - x);\n    if (!dmp.Match_Distance) {\n      // Dodge divide by zero error.\n      return proximity ? 1.0 : accuracy;\n    }\n    return accuracy + (proximity / dmp.Match_Distance);\n  }\n\n  // Highest score beyond which we give up.\n  var score_threshold = this.Match_Threshold;\n  // Is there a nearby exact match? (speedup)\n  var best_loc = text.indexOf(pattern, loc);\n  if (best_loc != -1) {\n    score_threshold = Math.min(match_bitapScore_(0, best_loc), score_threshold);\n    // What about in the other direction? (speedup)\n    best_loc = text.lastIndexOf(pattern, loc + pattern.length);\n    if (best_loc != -1) {\n      score_threshold =\n          Math.min(match_bitapScore_(0, best_loc), score_threshold);\n    }\n  }\n\n  // Initialise the bit arrays.\n  var matchmask = 1 << (pattern.length - 1);\n  best_loc = -1;\n\n  var bin_min, bin_mid;\n  var bin_max = pattern.length + text.length;\n  var last_rd;\n  for (var d = 0; d < pattern.length; d++) {\n    // Scan for the best match; each iteration allows for one more error.\n    // Run a binary search to determine how far from 'loc' we can stray at this\n    // error level.\n    bin_min = 0;\n    bin_mid = bin_max;\n    while (bin_min < bin_mid) {\n      if (match_bitapScore_(d, loc + bin_mid) <= score_threshold) {\n        bin_min = bin_mid;\n      } else {\n        bin_max = bin_mid;\n      }\n      bin_mid = Math.floor((bin_max - bin_min) / 2 + bin_min);\n    }\n    // Use the result from this iteration as the maximum for the next.\n    bin_max = bin_mid;\n    var start = Math.max(1, loc - bin_mid + 1);\n    var finish = Math.min(loc + bin_mid, text.length) + pattern.length;\n\n    var rd = Array(finish + 2);\n    rd[finish + 1] = (1 << d) - 1;\n    for (var j = finish; j >= start; j--) {\n      // The alphabet (s) is a sparse hash, so the following line generates\n      // warnings.\n      var charMatch = s[text.charAt(j - 1)];\n      if (d === 0) {  // First pass: exact match.\n        rd[j] = ((rd[j + 1] << 1) | 1) & charMatch;\n      } else {  // Subsequent passes: fuzzy match.\n        rd[j] = (((rd[j + 1] << 1) | 1) & charMatch) |\n                (((last_rd[j + 1] | last_rd[j]) << 1) | 1) |\n                last_rd[j + 1];\n      }\n      if (rd[j] & matchmask) {\n        var score = match_bitapScore_(d, j - 1);\n        // This match will almost certainly be better than any existing match.\n        // But check anyway.\n        if (score <= score_threshold) {\n          // Told you so.\n          score_threshold = score;\n          best_loc = j - 1;\n          if (best_loc > loc) {\n            // When passing loc, don't exceed our current distance from loc.\n            start = Math.max(1, 2 * loc - best_loc);\n          } else {\n            // Already passed loc, downhill from here on in.\n            break;\n          }\n        }\n      }\n    }\n    // No hope for a (better) match at greater error levels.\n    if (match_bitapScore_(d + 1, loc) > score_threshold) {\n      break;\n    }\n    last_rd = rd;\n  }\n  return best_loc;\n};\n\n\n/**\n * Initialise the alphabet for the Bitap algorithm.\n * @param {string} pattern The text to encode.\n * @return {!Object} Hash of character locations.\n * @private\n */\ndiff_match_patch.prototype.match_alphabet_ = function(pattern) {\n  var s = {};\n  for (var i = 0; i < pattern.length; i++) {\n    s[pattern.charAt(i)] = 0;\n  }\n  for (var i = 0; i < pattern.length; i++) {\n    s[pattern.charAt(i)] |= 1 << (pattern.length - i - 1);\n  }\n  return s;\n};\n\n\n//  PATCH FUNCTIONS\n\n\n/**\n * Increase the context until it is unique,\n * but don't let the pattern expand beyond Match_MaxBits.\n * @param {!diff_match_patch.patch_obj} patch The patch to grow.\n * @param {string} text Source text.\n * @private\n */\ndiff_match_patch.prototype.patch_addContext_ = function(patch, text) {\n  if (text.length == 0) {\n    return;\n  }\n  if (patch.start2 === null) {\n    throw Error('patch not initialized');\n  }\n  var pattern = text.substring(patch.start2, patch.start2 + patch.length1);\n  var padding = 0;\n\n  // Look for the first and last matches of pattern in text.  If two different\n  // matches are found, increase the pattern length.\n  while (text.indexOf(pattern) != text.lastIndexOf(pattern) &&\n         pattern.length < this.Match_MaxBits - this.Patch_Margin -\n         this.Patch_Margin) {\n    padding += this.Patch_Margin;\n    pattern = text.substring(patch.start2 - padding,\n                             patch.start2 + patch.length1 + padding);\n  }\n  // Add one chunk for good luck.\n  padding += this.Patch_Margin;\n\n  // Add the prefix.\n  var prefix = text.substring(patch.start2 - padding, patch.start2);\n  if (prefix) {\n    patch.diffs.unshift(new diff_match_patch.Diff(DIFF_EQUAL, prefix));\n  }\n  // Add the suffix.\n  var suffix = text.substring(patch.start2 + patch.length1,\n                              patch.start2 + patch.length1 + padding);\n  if (suffix) {\n    patch.diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, suffix));\n  }\n\n  // Roll back the start points.\n  patch.start1 -= prefix.length;\n  patch.start2 -= prefix.length;\n  // Extend the lengths.\n  patch.length1 += prefix.length + suffix.length;\n  patch.length2 += prefix.length + suffix.length;\n};\n\n\n/**\n * Compute a list of patches to turn text1 into text2.\n * Use diffs if provided, otherwise compute it ourselves.\n * There are four ways to call this function, depending on what data is\n * available to the caller:\n * Method 1:\n * a = text1, b = text2\n * Method 2:\n * a = diffs\n * Method 3 (optimal):\n * a = text1, b = diffs\n * Method 4 (deprecated, use method 3):\n * a = text1, b = text2, c = diffs\n *\n * @param {string|!Array.<!diff_match_patch.Diff>} a text1 (methods 1,3,4) or\n * Array of diff tuples for text1 to text2 (method 2).\n * @param {string|!Array.<!diff_match_patch.Diff>=} opt_b text2 (methods 1,4) or\n * Array of diff tuples for text1 to text2 (method 3) or undefined (method 2).\n * @param {string|!Array.<!diff_match_patch.Diff>=} opt_c Array of diff tuples\n * for text1 to text2 (method 4) or undefined (methods 1,2,3).\n * @return {!Array.<!diff_match_patch.patch_obj>} Array of Patch objects.\n */\ndiff_match_patch.prototype.patch_make = function(a, opt_b, opt_c) {\n  var text1, diffs;\n  if (typeof a == 'string' && typeof opt_b == 'string' &&\n      typeof opt_c == 'undefined') {\n    // Method 1: text1, text2\n    // Compute diffs from text1 and text2.\n    text1 = /** @type {string} */(a);\n    diffs = this.diff_main(text1, /** @type {string} */(opt_b), true);\n    if (diffs.length > 2) {\n      this.diff_cleanupSemantic(diffs);\n      this.diff_cleanupEfficiency(diffs);\n    }\n  } else if (a && typeof a == 'object' && typeof opt_b == 'undefined' &&\n      typeof opt_c == 'undefined') {\n    // Method 2: diffs\n    // Compute text1 from diffs.\n    diffs = /** @type {!Array.<!diff_match_patch.Diff>} */(a);\n    text1 = this.diff_text1(diffs);\n  } else if (typeof a == 'string' && opt_b && typeof opt_b == 'object' &&\n      typeof opt_c == 'undefined') {\n    // Method 3: text1, diffs\n    text1 = /** @type {string} */(a);\n    diffs = /** @type {!Array.<!diff_match_patch.Diff>} */(opt_b);\n  } else if (typeof a == 'string' && typeof opt_b == 'string' &&\n      opt_c && typeof opt_c == 'object') {\n    // Method 4: text1, text2, diffs\n    // text2 is not used.\n    text1 = /** @type {string} */(a);\n    diffs = /** @type {!Array.<!diff_match_patch.Diff>} */(opt_c);\n  } else {\n    throw new Error('Unknown call format to patch_make.');\n  }\n\n  if (diffs.length === 0) {\n    return [];  // Get rid of the null case.\n  }\n  var patches = [];\n  var patch = new diff_match_patch.patch_obj();\n  var patchDiffLength = 0;  // Keeping our own length var is faster in JS.\n  var char_count1 = 0;  // Number of characters into the text1 string.\n  var char_count2 = 0;  // Number of characters into the text2 string.\n  // Start with text1 (prepatch_text) and apply the diffs until we arrive at\n  // text2 (postpatch_text).  We recreate the patches one by one to determine\n  // context info.\n  var prepatch_text = text1;\n  var postpatch_text = text1;\n  for (var x = 0; x < diffs.length; x++) {\n    var diff_type = diffs[x][0];\n    var diff_text = diffs[x][1];\n\n    if (!patchDiffLength && diff_type !== DIFF_EQUAL) {\n      // A new patch starts here.\n      patch.start1 = char_count1;\n      patch.start2 = char_count2;\n    }\n\n    switch (diff_type) {\n      case DIFF_INSERT:\n        patch.diffs[patchDiffLength++] = diffs[x];\n        patch.length2 += diff_text.length;\n        postpatch_text = postpatch_text.substring(0, char_count2) + diff_text +\n                         postpatch_text.substring(char_count2);\n        break;\n      case DIFF_DELETE:\n        patch.length1 += diff_text.length;\n        patch.diffs[patchDiffLength++] = diffs[x];\n        postpatch_text = postpatch_text.substring(0, char_count2) +\n                         postpatch_text.substring(char_count2 +\n                             diff_text.length);\n        break;\n      case DIFF_EQUAL:\n        if (diff_text.length <= 2 * this.Patch_Margin &&\n            patchDiffLength && diffs.length != x + 1) {\n          // Small equality inside a patch.\n          patch.diffs[patchDiffLength++] = diffs[x];\n          patch.length1 += diff_text.length;\n          patch.length2 += diff_text.length;\n        } else if (diff_text.length >= 2 * this.Patch_Margin) {\n          // Time for a new patch.\n          if (patchDiffLength) {\n            this.patch_addContext_(patch, prepatch_text);\n            patches.push(patch);\n            patch = new diff_match_patch.patch_obj();\n            patchDiffLength = 0;\n            // Unlike Unidiff, our patch lists have a rolling context.\n            // https://github.com/google/diff-match-patch/wiki/Unidiff\n            // Update prepatch text & pos to reflect the application of the\n            // just completed patch.\n            prepatch_text = postpatch_text;\n            char_count1 = char_count2;\n          }\n        }\n        break;\n    }\n\n    // Update the current character count.\n    if (diff_type !== DIFF_INSERT) {\n      char_count1 += diff_text.length;\n    }\n    if (diff_type !== DIFF_DELETE) {\n      char_count2 += diff_text.length;\n    }\n  }\n  // Pick up the leftover patch if not empty.\n  if (patchDiffLength) {\n    this.patch_addContext_(patch, prepatch_text);\n    patches.push(patch);\n  }\n\n  return patches;\n};\n\n\n/**\n * Given an array of patches, return another array that is identical.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n * @return {!Array.<!diff_match_patch.patch_obj>} Array of Patch objects.\n */\ndiff_match_patch.prototype.patch_deepCopy = function(patches) {\n  // Making deep copies is hard in JavaScript.\n  var patchesCopy = [];\n  for (var x = 0; x < patches.length; x++) {\n    var patch = patches[x];\n    var patchCopy = new diff_match_patch.patch_obj();\n    patchCopy.diffs = [];\n    for (var y = 0; y < patch.diffs.length; y++) {\n      patchCopy.diffs[y] =\n          new diff_match_patch.Diff(patch.diffs[y][0], patch.diffs[y][1]);\n    }\n    patchCopy.start1 = patch.start1;\n    patchCopy.start2 = patch.start2;\n    patchCopy.length1 = patch.length1;\n    patchCopy.length2 = patch.length2;\n    patchesCopy[x] = patchCopy;\n  }\n  return patchesCopy;\n};\n\n\n/**\n * Merge a set of patches onto the text.  Return a patched text, as well\n * as a list of true/false values indicating which patches were applied.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n * @param {string} text Old text.\n * @return {!Array.<string|!Array.<boolean>>} Two element Array, containing the\n *      new text and an array of boolean values.\n */\ndiff_match_patch.prototype.patch_apply = function(patches, text) {\n  if (patches.length == 0) {\n    return [text, []];\n  }\n\n  // Deep copy the patches so that no changes are made to originals.\n  patches = this.patch_deepCopy(patches);\n\n  var nullPadding = this.patch_addPadding(patches);\n  text = nullPadding + text + nullPadding;\n\n  this.patch_splitMax(patches);\n  // delta keeps track of the offset between the expected and actual location\n  // of the previous patch.  If there are patches expected at positions 10 and\n  // 20, but the first patch was found at 12, delta is 2 and the second patch\n  // has an effective expected position of 22.\n  var delta = 0;\n  var results = [];\n  for (var x = 0; x < patches.length; x++) {\n    var expected_loc = patches[x].start2 + delta;\n    var text1 = this.diff_text1(patches[x].diffs);\n    var start_loc;\n    var end_loc = -1;\n    if (text1.length > this.Match_MaxBits) {\n      // patch_splitMax will only provide an oversized pattern in the case of\n      // a monster delete.\n      start_loc = this.match_main(text, text1.substring(0, this.Match_MaxBits),\n                                  expected_loc);\n      if (start_loc != -1) {\n        end_loc = this.match_main(text,\n            text1.substring(text1.length - this.Match_MaxBits),\n            expected_loc + text1.length - this.Match_MaxBits);\n        if (end_loc == -1 || start_loc >= end_loc) {\n          // Can't find valid trailing context.  Drop this patch.\n          start_loc = -1;\n        }\n      }\n    } else {\n      start_loc = this.match_main(text, text1, expected_loc);\n    }\n    if (start_loc == -1) {\n      // No match found.  :(\n      results[x] = false;\n      // Subtract the delta for this failed patch from subsequent patches.\n      delta -= patches[x].length2 - patches[x].length1;\n    } else {\n      // Found a match.  :)\n      results[x] = true;\n      delta = start_loc - expected_loc;\n      var text2;\n      if (end_loc == -1) {\n        text2 = text.substring(start_loc, start_loc + text1.length);\n      } else {\n        text2 = text.substring(start_loc, end_loc + this.Match_MaxBits);\n      }\n      if (text1 == text2) {\n        // Perfect match, just shove the replacement text in.\n        text = text.substring(0, start_loc) +\n               this.diff_text2(patches[x].diffs) +\n               text.substring(start_loc + text1.length);\n      } else {\n        // Imperfect match.  Run a diff to get a framework of equivalent\n        // indices.\n        var diffs = this.diff_main(text1, text2, false);\n        if (text1.length > this.Match_MaxBits &&\n            this.diff_levenshtein(diffs) / text1.length >\n            this.Patch_DeleteThreshold) {\n          // The end points match, but the content is unacceptably bad.\n          results[x] = false;\n        } else {\n          this.diff_cleanupSemanticLossless(diffs);\n          var index1 = 0;\n          var index2;\n          for (var y = 0; y < patches[x].diffs.length; y++) {\n            var mod = patches[x].diffs[y];\n            if (mod[0] !== DIFF_EQUAL) {\n              index2 = this.diff_xIndex(diffs, index1);\n            }\n            if (mod[0] === DIFF_INSERT) {  // Insertion\n              text = text.substring(0, start_loc + index2) + mod[1] +\n                     text.substring(start_loc + index2);\n            } else if (mod[0] === DIFF_DELETE) {  // Deletion\n              text = text.substring(0, start_loc + index2) +\n                     text.substring(start_loc + this.diff_xIndex(diffs,\n                         index1 + mod[1].length));\n            }\n            if (mod[0] !== DIFF_DELETE) {\n              index1 += mod[1].length;\n            }\n          }\n        }\n      }\n    }\n  }\n  // Strip the padding off.\n  text = text.substring(nullPadding.length, text.length - nullPadding.length);\n  return [text, results];\n};\n\n\n/**\n * Add some padding on text start and end so that edges can match something.\n * Intended to be called only from within patch_apply.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n * @return {string} The padding string added to each side.\n */\ndiff_match_patch.prototype.patch_addPadding = function(patches) {\n  var paddingLength = this.Patch_Margin;\n  var nullPadding = '';\n  for (var x = 1; x <= paddingLength; x++) {\n    nullPadding += String.fromCharCode(x);\n  }\n\n  // Bump all the patches forward.\n  for (var x = 0; x < patches.length; x++) {\n    patches[x].start1 += paddingLength;\n    patches[x].start2 += paddingLength;\n  }\n\n  // Add some padding on start of first diff.\n  var patch = patches[0];\n  var diffs = patch.diffs;\n  if (diffs.length == 0 || diffs[0][0] != DIFF_EQUAL) {\n    // Add nullPadding equality.\n    diffs.unshift(new diff_match_patch.Diff(DIFF_EQUAL, nullPadding));\n    patch.start1 -= paddingLength;  // Should be 0.\n    patch.start2 -= paddingLength;  // Should be 0.\n    patch.length1 += paddingLength;\n    patch.length2 += paddingLength;\n  } else if (paddingLength > diffs[0][1].length) {\n    // Grow first equality.\n    var extraLength = paddingLength - diffs[0][1].length;\n    diffs[0][1] = nullPadding.substring(diffs[0][1].length) + diffs[0][1];\n    patch.start1 -= extraLength;\n    patch.start2 -= extraLength;\n    patch.length1 += extraLength;\n    patch.length2 += extraLength;\n  }\n\n  // Add some padding on end of last diff.\n  patch = patches[patches.length - 1];\n  diffs = patch.diffs;\n  if (diffs.length == 0 || diffs[diffs.length - 1][0] != DIFF_EQUAL) {\n    // Add nullPadding equality.\n    diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, nullPadding));\n    patch.length1 += paddingLength;\n    patch.length2 += paddingLength;\n  } else if (paddingLength > diffs[diffs.length - 1][1].length) {\n    // Grow last equality.\n    var extraLength = paddingLength - diffs[diffs.length - 1][1].length;\n    diffs[diffs.length - 1][1] += nullPadding.substring(0, extraLength);\n    patch.length1 += extraLength;\n    patch.length2 += extraLength;\n  }\n\n  return nullPadding;\n};\n\n\n/**\n * Look through the patches and break up any which are longer than the maximum\n * limit of the match algorithm.\n * Intended to be called only from within patch_apply.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n */\ndiff_match_patch.prototype.patch_splitMax = function(patches) {\n  var patch_size = this.Match_MaxBits;\n  for (var x = 0; x < patches.length; x++) {\n    if (patches[x].length1 <= patch_size) {\n      continue;\n    }\n    var bigpatch = patches[x];\n    // Remove the big old patch.\n    patches.splice(x--, 1);\n    var start1 = bigpatch.start1;\n    var start2 = bigpatch.start2;\n    var precontext = '';\n    while (bigpatch.diffs.length !== 0) {\n      // Create one of several smaller patches.\n      var patch = new diff_match_patch.patch_obj();\n      var empty = true;\n      patch.start1 = start1 - precontext.length;\n      patch.start2 = start2 - precontext.length;\n      if (precontext !== '') {\n        patch.length1 = patch.length2 = precontext.length;\n        patch.diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, precontext));\n      }\n      while (bigpatch.diffs.length !== 0 &&\n             patch.length1 < patch_size - this.Patch_Margin) {\n        var diff_type = bigpatch.diffs[0][0];\n        var diff_text = bigpatch.diffs[0][1];\n        if (diff_type === DIFF_INSERT) {\n          // Insertions are harmless.\n          patch.length2 += diff_text.length;\n          start2 += diff_text.length;\n          patch.diffs.push(bigpatch.diffs.shift());\n          empty = false;\n        } else if (diff_type === DIFF_DELETE && patch.diffs.length == 1 &&\n                   patch.diffs[0][0] == DIFF_EQUAL &&\n                   diff_text.length > 2 * patch_size) {\n          // This is a large deletion.  Let it pass in one chunk.\n          patch.length1 += diff_text.length;\n          start1 += diff_text.length;\n          empty = false;\n          patch.diffs.push(new diff_match_patch.Diff(diff_type, diff_text));\n          bigpatch.diffs.shift();\n        } else {\n          // Deletion or equality.  Only take as much as we can stomach.\n          diff_text = diff_text.substring(0,\n              patch_size - patch.length1 - this.Patch_Margin);\n          patch.length1 += diff_text.length;\n          start1 += diff_text.length;\n          if (diff_type === DIFF_EQUAL) {\n            patch.length2 += diff_text.length;\n            start2 += diff_text.length;\n          } else {\n            empty = false;\n          }\n          patch.diffs.push(new diff_match_patch.Diff(diff_type, diff_text));\n          if (diff_text == bigpatch.diffs[0][1]) {\n            bigpatch.diffs.shift();\n          } else {\n            bigpatch.diffs[0][1] =\n                bigpatch.diffs[0][1].substring(diff_text.length);\n          }\n        }\n      }\n      // Compute the head context for the next patch.\n      precontext = this.diff_text2(patch.diffs);\n      precontext =\n          precontext.substring(precontext.length - this.Patch_Margin);\n      // Append the end context for this patch.\n      var postcontext = this.diff_text1(bigpatch.diffs)\n                            .substring(0, this.Patch_Margin);\n      if (postcontext !== '') {\n        patch.length1 += postcontext.length;\n        patch.length2 += postcontext.length;\n        if (patch.diffs.length !== 0 &&\n            patch.diffs[patch.diffs.length - 1][0] === DIFF_EQUAL) {\n          patch.diffs[patch.diffs.length - 1][1] += postcontext;\n        } else {\n          patch.diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, postcontext));\n        }\n      }\n      if (!empty) {\n        patches.splice(++x, 0, patch);\n      }\n    }\n  }\n};\n\n\n/**\n * Take a list of patches and return a textual representation.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n * @return {string} Text representation of patches.\n */\ndiff_match_patch.prototype.patch_toText = function(patches) {\n  var text = [];\n  for (var x = 0; x < patches.length; x++) {\n    text[x] = patches[x];\n  }\n  return text.join('');\n};\n\n\n/**\n * Parse a textual representation of patches and return a list of Patch objects.\n * @param {string} textline Text representation of patches.\n * @return {!Array.<!diff_match_patch.patch_obj>} Array of Patch objects.\n * @throws {!Error} If invalid input.\n */\ndiff_match_patch.prototype.patch_fromText = function(textline) {\n  var patches = [];\n  if (!textline) {\n    return patches;\n  }\n  var text = textline.split('\\n');\n  var textPointer = 0;\n  var patchHeader = /^@@ -(\\d+),?(\\d*) \\+(\\d+),?(\\d*) @@$/;\n  while (textPointer < text.length) {\n    var m = text[textPointer].match(patchHeader);\n    if (!m) {\n      throw new Error('Invalid patch string: ' + text[textPointer]);\n    }\n    var patch = new diff_match_patch.patch_obj();\n    patches.push(patch);\n    patch.start1 = parseInt(m[1], 10);\n    if (m[2] === '') {\n      patch.start1--;\n      patch.length1 = 1;\n    } else if (m[2] == '0') {\n      patch.length1 = 0;\n    } else {\n      patch.start1--;\n      patch.length1 = parseInt(m[2], 10);\n    }\n\n    patch.start2 = parseInt(m[3], 10);\n    if (m[4] === '') {\n      patch.start2--;\n      patch.length2 = 1;\n    } else if (m[4] == '0') {\n      patch.length2 = 0;\n    } else {\n      patch.start2--;\n      patch.length2 = parseInt(m[4], 10);\n    }\n    textPointer++;\n\n    while (textPointer < text.length) {\n      var sign = text[textPointer].charAt(0);\n      try {\n        var line = decodeURI(text[textPointer].substring(1));\n      } catch (ex) {\n        // Malformed URI sequence.\n        throw new Error('Illegal escape in patch_fromText: ' + line);\n      }\n      if (sign == '-') {\n        // Deletion.\n        patch.diffs.push(new diff_match_patch.Diff(DIFF_DELETE, line));\n      } else if (sign == '+') {\n        // Insertion.\n        patch.diffs.push(new diff_match_patch.Diff(DIFF_INSERT, line));\n      } else if (sign == ' ') {\n        // Minor equality.\n        patch.diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, line));\n      } else if (sign == '@') {\n        // Start of next patch.\n        break;\n      } else if (sign === '') {\n        // Blank line?  Whatever.\n      } else {\n        // WTF?\n        throw new Error('Invalid patch mode \"' + sign + '\" in: ' + line);\n      }\n      textPointer++;\n    }\n  }\n  return patches;\n};\n\n\n/**\n * Class representing one patch operation.\n * @constructor\n */\ndiff_match_patch.patch_obj = function() {\n  /** @type {!Array.<!diff_match_patch.Diff>} */\n  this.diffs = [];\n  /** @type {?number} */\n  this.start1 = null;\n  /** @type {?number} */\n  this.start2 = null;\n  /** @type {number} */\n  this.length1 = 0;\n  /** @type {number} */\n  this.length2 = 0;\n};\n\n\n/**\n * Emulate GNU diff's format.\n * Header: @@ -382,8 +481,9 @@\n * Indices are printed as 1-based, not 0-based.\n * @return {string} The GNU diff string.\n */\ndiff_match_patch.patch_obj.prototype.toString = function() {\n  var coords1, coords2;\n  if (this.length1 === 0) {\n    coords1 = this.start1 + ',0';\n  } else if (this.length1 == 1) {\n    coords1 = this.start1 + 1;\n  } else {\n    coords1 = (this.start1 + 1) + ',' + this.length1;\n  }\n  if (this.length2 === 0) {\n    coords2 = this.start2 + ',0';\n  } else if (this.length2 == 1) {\n    coords2 = this.start2 + 1;\n  } else {\n    coords2 = (this.start2 + 1) + ',' + this.length2;\n  }\n  var text = ['@@ -' + coords1 + ' +' + coords2 + ' @@\\n'];\n  var op;\n  // Escape the body of the patch with %xx notation.\n  for (var x = 0; x < this.diffs.length; x++) {\n    switch (this.diffs[x][0]) {\n      case DIFF_INSERT:\n        op = '+';\n        break;\n      case DIFF_DELETE:\n        op = '-';\n        break;\n      case DIFF_EQUAL:\n        op = ' ';\n        break;\n    }\n    text[x + 1] = op + encodeURI(this.diffs[x][1]) + '\\n';\n  }\n  return text.join('').replace(/%20/g, ' ');\n};\n\n\n// The following export code was added by @ForbesLindesay\nmodule.exports = diff_match_patch;\nmodule.exports['diff_match_patch'] = diff_match_patch;\nmodule.exports['DIFF_DELETE'] = DIFF_DELETE;\nmodule.exports['DIFF_INSERT'] = DIFF_INSERT;\nmodule.exports['DIFF_EQUAL'] = DIFF_EQUAL;","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/** `Object#toString` result references. */\nvar funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    symbolTag = '[object Symbol]';\n\n/** Used to match property names within property paths. */\nvar reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\n    reIsPlainProp = /^\\w*$/,\n    reLeadingDot = /^\\./,\n    rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to match backslashes in property paths. */\nvar reEscapeChar = /\\\\(\\\\)?/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Checks if `value` is a host object in IE < 9.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n */\nfunction isHostObject(value) {\n  // Many host objects are `Object` objects that can coerce to strings\n  // despite having improperly defined `toString` methods.\n  var result = false;\n  if (value != null && typeof value.toString != 'function') {\n    try {\n      result = !!(value + '');\n    } catch (e) {}\n  }\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Symbol = root.Symbol,\n    splice = arrayProto.splice;\n\n/* Built-in method references that are verified to be native. */\nvar Map = getNative(root, 'Map'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  return this.has(key) && delete this.__data__[key];\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  return getMapData(this, key)['delete'](key);\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  getMapData(this, key).set(key, value);\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.get` without support for default values.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @returns {*} Returns the resolved value.\n */\nfunction baseGet(object, path) {\n  path = isKey(path, object) ? [path] : castPath(path);\n\n  var index = 0,\n      length = path.length;\n\n  while (object != null && index < length) {\n    object = object[toKey(path[index++])];\n  }\n  return (index && index == length) ? object : undefined;\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * Casts `value` to a path array if it's not one.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {Array} Returns the cast property path array.\n */\nfunction castPath(value) {\n  return isArray(value) ? value : stringToPath(value);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * Checks if `value` is a property name and not a property path.\n *\n * @private\n * @param {*} value The value to check.\n * @param {Object} [object] The object to query keys on.\n * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n */\nfunction isKey(value, object) {\n  if (isArray(value)) {\n    return false;\n  }\n  var type = typeof value;\n  if (type == 'number' || type == 'symbol' || type == 'boolean' ||\n      value == null || isSymbol(value)) {\n    return true;\n  }\n  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||\n    (object != null && value in Object(object));\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Converts `string` to a property path array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the property path array.\n */\nvar stringToPath = memoize(function(string) {\n  string = toString(string);\n\n  var result = [];\n  if (reLeadingDot.test(string)) {\n    result.push('');\n  }\n  string.replace(rePropName, function(match, number, quote, string) {\n    result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));\n  });\n  return result;\n});\n\n/**\n * Converts `value` to a string key if it's not a string or symbol.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {string|symbol} Returns the key.\n */\nfunction toKey(value) {\n  if (typeof value == 'string' || isSymbol(value)) {\n    return value;\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to process.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Creates a function that memoizes the result of `func`. If `resolver` is\n * provided, it determines the cache key for storing the result based on the\n * arguments provided to the memoized function. By default, the first argument\n * provided to the memoized function is used as the map cache key. The `func`\n * is invoked with the `this` binding of the memoized function.\n *\n * **Note:** The cache is exposed as the `cache` property on the memoized\n * function. Its creation may be customized by replacing the `_.memoize.Cache`\n * constructor with one whose instances implement the\n * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n * method interface of `delete`, `get`, `has`, and `set`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to have its output memoized.\n * @param {Function} [resolver] The function to resolve the cache key.\n * @returns {Function} Returns the new memoized function.\n * @example\n *\n * var object = { 'a': 1, 'b': 2 };\n * var other = { 'c': 3, 'd': 4 };\n *\n * var values = _.memoize(_.values);\n * values(object);\n * // => [1, 2]\n *\n * values(other);\n * // => [3, 4]\n *\n * object.a = 2;\n * values(object);\n * // => [1, 2]\n *\n * // Modify the result cache.\n * values.cache.set(object, ['a', 'b']);\n * values(object);\n * // => ['a', 'b']\n *\n * // Replace `_.memoize.Cache`.\n * _.memoize.Cache = WeakMap;\n */\nfunction memoize(func, resolver) {\n  if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  var memoized = function() {\n    var args = arguments,\n        key = resolver ? resolver.apply(this, args) : args[0],\n        cache = memoized.cache;\n\n    if (cache.has(key)) {\n      return cache.get(key);\n    }\n    var result = func.apply(this, args);\n    memoized.cache = cache.set(key, result);\n    return result;\n  };\n  memoized.cache = new (memoize.Cache || MapCache);\n  return memoized;\n}\n\n// Assign cache to `_.memoize`.\nmemoize.Cache = MapCache;\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\n/**\n * Gets the value at `path` of `object`. If the resolved value is\n * `undefined`, the `defaultValue` is returned in its place.\n *\n * @static\n * @memberOf _\n * @since 3.7.0\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n * @returns {*} Returns the resolved value.\n * @example\n *\n * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n *\n * _.get(object, 'a[0].b.c');\n * // => 3\n *\n * _.get(object, ['a', '0', 'b', 'c']);\n * // => 3\n *\n * _.get(object, 'a.b.c', 'default');\n * // => 'default'\n */\nfunction get(object, path, defaultValue) {\n  var result = object == null ? undefined : baseGet(object, path);\n  return result === undefined ? defaultValue : result;\n}\n\nmodule.exports = get;\n","/**\n * Lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright JS Foundation and other contributors <https://js.foundation/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    asyncTag = '[object AsyncFunction]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    nullTag = '[object Null]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    proxyTag = '[object Proxy]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    undefinedTag = '[object Undefined]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * A specialized version of `_.filter` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction arrayFilter(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n    if (predicate(value, index, array)) {\n      result[resIndex++] = value;\n    }\n  }\n  return result;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.some` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n */\nfunction arraySome(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (predicate(array[index], index, array)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\n/**\n * Checks if a `cache` value for `key` exists.\n *\n * @private\n * @param {Object} cache The cache to query.\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction cacheHas(cache, key) {\n  return cache.has(key);\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice,\n    symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  var result = this.has(key) && delete this.__data__[key];\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  this.size += this.has(key) ? 0 : 1;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  --this.size;\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    ++this.size;\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.size = 0;\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  var result = getMapData(this, key)['delete'](key);\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  var data = getMapData(this, key),\n      size = data.size;\n\n  data.set(key, value);\n  this.size += data.size == size ? 0 : 1;\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n *\n * Creates an array cache object to store unique values.\n *\n * @private\n * @constructor\n * @param {Array} [values] The values to cache.\n */\nfunction SetCache(values) {\n  var index = -1,\n      length = values == null ? 0 : values.length;\n\n  this.__data__ = new MapCache;\n  while (++index < length) {\n    this.add(values[index]);\n  }\n}\n\n/**\n * Adds `value` to the array cache.\n *\n * @private\n * @name add\n * @memberOf SetCache\n * @alias push\n * @param {*} value The value to cache.\n * @returns {Object} Returns the cache instance.\n */\nfunction setCacheAdd(value) {\n  this.__data__.set(value, HASH_UNDEFINED);\n  return this;\n}\n\n/**\n * Checks if `value` is in the array cache.\n *\n * @private\n * @name has\n * @memberOf SetCache\n * @param {*} value The value to search for.\n * @returns {number} Returns `true` if `value` is found, else `false`.\n */\nfunction setCacheHas(value) {\n  return this.__data__.has(value);\n}\n\n// Add methods to `SetCache`.\nSetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\nSetCache.prototype.has = setCacheHas;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  var data = this.__data__ = new ListCache(entries);\n  this.size = data.size;\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  var data = this.__data__,\n      result = data['delete'](key);\n\n  this.size = data.size;\n  return result;\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var data = this.__data__;\n  if (data instanceof ListCache) {\n    var pairs = data.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      this.size = ++data.size;\n      return this;\n    }\n    data = this.__data__ = new MapCache(pairs);\n  }\n  data.set(key, value);\n  this.size = data.size;\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  var isArr = isArray(value),\n      isArg = !isArr && isArguments(value),\n      isBuff = !isArr && !isArg && isBuffer(value),\n      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? baseTimes(value.length, String) : [],\n      length = result.length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (\n           // Safari 9 has enumerable `arguments.length` in strict mode.\n           key == 'length' ||\n           // Node.js 0.10 has enumerable non-index properties on buffers.\n           (isBuff && (key == 'offset' || key == 'parent')) ||\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n           // Skip index properties.\n           isIndex(key, length)\n        ))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\n/**\n * The base implementation of `_.isEqual` which supports partial comparisons\n * and tracks traversed objects.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Unordered comparison\n *  2 - Partial comparison\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n */\nfunction baseIsEqual(value, other, bitmask, customizer, stack) {\n  if (value === other) {\n    return true;\n  }\n  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\n    return value !== value && other !== other;\n  }\n  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n}\n\n/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n  var objIsArr = isArray(object),\n      othIsArr = isArray(other),\n      objTag = objIsArr ? arrayTag : getTag(object),\n      othTag = othIsArr ? arrayTag : getTag(other);\n\n  objTag = objTag == argsTag ? objectTag : objTag;\n  othTag = othTag == argsTag ? objectTag : othTag;\n\n  var objIsObj = objTag == objectTag,\n      othIsObj = othTag == objectTag,\n      isSameTag = objTag == othTag;\n\n  if (isSameTag && isBuffer(object)) {\n    if (!isBuffer(other)) {\n      return false;\n    }\n    objIsArr = true;\n    objIsObj = false;\n  }\n  if (isSameTag && !objIsObj) {\n    stack || (stack = new Stack);\n    return (objIsArr || isTypedArray(object))\n      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n  }\n  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n    if (objIsWrapped || othIsWrapped) {\n      var objUnwrapped = objIsWrapped ? object.value() : object,\n          othUnwrapped = othIsWrapped ? other.value() : other;\n\n      stack || (stack = new Stack);\n      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n    }\n  }\n  if (!isSameTag) {\n    return false;\n  }\n  stack || (stack = new Stack);\n  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n    return false;\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(array);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var index = -1,\n      result = true,\n      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n  stack.set(array, other);\n  stack.set(other, array);\n\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, arrValue, index, other, array, stack)\n        : customizer(arrValue, othValue, index, array, other, stack);\n    }\n    if (compared !== undefined) {\n      if (compared) {\n        continue;\n      }\n      result = false;\n      break;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (seen) {\n      if (!arraySome(other, function(othValue, othIndex) {\n            if (!cacheHas(seen, othIndex) &&\n                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n              return seen.push(othIndex);\n            }\n          })) {\n        result = false;\n        break;\n      }\n    } else if (!(\n          arrValue === othValue ||\n            equalFunc(arrValue, othValue, bitmask, customizer, stack)\n        )) {\n      result = false;\n      break;\n    }\n  }\n  stack['delete'](array);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n  switch (tag) {\n    case dataViewTag:\n      if ((object.byteLength != other.byteLength) ||\n          (object.byteOffset != other.byteOffset)) {\n        return false;\n      }\n      object = object.buffer;\n      other = other.buffer;\n\n    case arrayBufferTag:\n      if ((object.byteLength != other.byteLength) ||\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n        return false;\n      }\n      return true;\n\n    case boolTag:\n    case dateTag:\n    case numberTag:\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\n      // Invalid dates are coerced to `NaN`.\n      return eq(+object, +other);\n\n    case errorTag:\n      return object.name == other.name && object.message == other.message;\n\n    case regexpTag:\n    case stringTag:\n      // Coerce regexes to strings and treat strings, primitives and objects,\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n      // for more details.\n      return object == (other + '');\n\n    case mapTag:\n      var convert = mapToArray;\n\n    case setTag:\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n      convert || (convert = setToArray);\n\n      if (object.size != other.size && !isPartial) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked) {\n        return stacked == other;\n      }\n      bitmask |= COMPARE_UNORDERED_FLAG;\n\n      // Recursively compare objects (susceptible to call stack limits).\n      stack.set(object, other);\n      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n      stack['delete'](object);\n      return result;\n\n    case symbolTag:\n      if (symbolValueOf) {\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\n      }\n  }\n  return false;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for objects with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      objProps = getAllKeys(object),\n      objLength = objProps.length,\n      othProps = getAllKeys(other),\n      othLength = othProps.length;\n\n  if (objLength != othLength && !isPartial) {\n    return false;\n  }\n  var index = objLength;\n  while (index--) {\n    var key = objProps[index];\n    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n      return false;\n    }\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(object);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var result = true;\n  stack.set(object, other);\n  stack.set(other, object);\n\n  var skipCtor = isPartial;\n  while (++index < objLength) {\n    key = objProps[index];\n    var objValue = object[key],\n        othValue = other[key];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, objValue, key, other, object, stack)\n        : customizer(objValue, othValue, key, object, other, stack);\n    }\n    // Recursively compare objects (susceptible to call stack limits).\n    if (!(compared === undefined\n          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\n          : compared\n        )) {\n      result = false;\n      break;\n    }\n    skipCtor || (skipCtor = key == 'constructor');\n  }\n  if (result && !skipCtor) {\n    var objCtor = object.constructor,\n        othCtor = other.constructor;\n\n    // Non `Object` object instances with different constructors are not equal.\n    if (objCtor != othCtor &&\n        ('constructor' in object && 'constructor' in other) &&\n        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n          typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n      result = false;\n    }\n  }\n  stack['delete'](object);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\n/**\n * Creates an array of the own enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = !nativeGetSymbols ? stubArray : function(object) {\n  if (object == null) {\n    return [];\n  }\n  object = Object(object);\n  return arrayFilter(nativeGetSymbols(object), function(symbol) {\n    return propertyIsEnumerable.call(object, symbol);\n  });\n};\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = baseGetTag(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : '';\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Performs a deep comparison between two values to determine if they are\n * equivalent.\n *\n * **Note:** This method supports comparing arrays, array buffers, booleans,\n * date objects, error objects, maps, numbers, `Object` objects, regexes,\n * sets, strings, symbols, and typed arrays. `Object` objects are compared\n * by their own, not inherited, enumerable properties. Functions and DOM\n * nodes are compared by strict equality, i.e. `===`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.isEqual(object, other);\n * // => true\n *\n * object === other;\n * // => false\n */\nfunction isEqual(value, other) {\n  return baseIsEqual(value, other);\n}\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = isEqual;\n"],"sourceRoot":""}